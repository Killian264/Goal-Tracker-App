%include "/usr/local/share/csc314/asm_io.inc"


%define LETTUCE 1
%define ONIONS 2
%define TOMATOES 4
%define PICKLES 8
%define MUSTARD 16
%define KETCHUP 32

segment .data

        msg_code db "Krabby Patty code?: ",10,0
        msg_needs db "That Krabby Patty needs... ",10,0
    msg_lettuce db "  - Lettuce ",10,0
    msg_onions  db "  - Onions ",10,0
    msg_tomatoes db "  - Tomatoes ",10,0
    msg_pickles db "  - Pickles ",10,0
    msg_mustard db "  - Mustard ",10,0
    msg_ketchup db "  - Ketchup ",10,0

segment .bss

    code resd 1

segment .text
        global  asm_main

asm_main:
    push    ebp
    mov             ebp, esp
    ; ********** CODE STARTS HERE **********

        mov eax, msg_code
        call print_string
        call read_int
        xor eax, 123123
        mov DWORD [code], eax
        mov eax, msg_needs
        call print_string

        mov eax, DWORD [code]
        and eax, LETTUCE
        cmp eax, 0
        je no_lettuce
            mov eax, msg_lettuce
            call print_string
        no_lettuce:

        mov eax, DWORD [code]
        and eax, ONIONS
        cmp eax, 0
        je no_onions
            mov eax, msg_onions
            call print_string
        no_onions:

        mov eax, DWORD [code]
        and eax, TOMATOES
        cmp eax, 0
        je no_tomatoes
            mov eax, msg_tomatoes
            call print_string
        no_tomatoes:
        
        mov eax, DWORD [code]
        and eax, PICKLES
        cmp eax, 0
        je no_pickles
            mov eax, msg_pickles
            call print_string
        no_pickles:
        
        mov eax, DWORD [code]
        and eax, MUSTARD
        cmp eax, 0
        je no_mustard
            mov eax, msg_mustard
            call print_string
        no_mustard:
        
        mov eax, DWORD [code]
        and eax, KETCHUP
        cmp eax, 0
        je no_ketchup
            mov eax, msg_ketchup
            call print_string
        no_ketchup:




        ; *********** CODE ENDS HERE ***********
        mov             eax, 0
        mov             esp, ebp
        pop             ebp
        ret
