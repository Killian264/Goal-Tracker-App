{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Killian\\\\Desktop\\\\Projects\\\\Goal-Tracker\\\\reactappthingy\\\\my-app\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport DailyGoalHeading from './DailyGoals/DailyGoalHeading';\nimport DailyGoals from './DailyGoals/DailyGoals';\nimport OtherGoals from './OtherGoals/OtherGoals';\nimport Overlay from './Overlay';\nimport TypeSelector from './TypeSelector';\nimport uuid from 'uuid';\nimport { getToday } from './commonCommands';\nimport { bigIntLiteral } from '@babel/types';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      goals: {\n        dailyGoals: [{\n          id: 1,\n          title: 'Programme',\n          snippit: 'Write Code',\n          startDate: '2019, 7, 1 00:00',\n          endDate: '2019, 7, 30 00:00',\n          lastDayChecked: '2019, 7, 14 00:00',\n          daysChecked: 20,\n          weeklyChecked: [true, false, true, true, false, false, false]\n        }, {\n          id: 2,\n          title: 'Learn React',\n          snippit: 'Write Code',\n          startDate: '2019, 7, 1 00:00',\n          endDate: '2019, 7, 15 00:00',\n          daysChecked: 20,\n          weeklyChecked: [true, true, false, true, false, false, false]\n        }, {\n          id: 3,\n          title: 'Be Cool',\n          snippit: 'Yea',\n          startDate: '2019, 7, 1 00:00',\n          endDate: '2019, 7, 15 00:00',\n          daysChecked: 20,\n          weeklyChecked: [false, true, true, true, false, false, false]\n        }],\n        otherGoalsCategories: [{\n          category: 'Programming',\n          id: 1,\n          otherGoals: [{\n            id: 1,\n            title: 'Learn React',\n            snippit: 'Code a bunch of stuff',\n            startDate: '2019, 7, 1 00:00',\n            endDate: '2019, 7, 15 00:00',\n            percentComplete: 20\n          }, {\n            id: 2,\n            title: 'Learn to Code',\n            snippit: 'Learn React, C++, SQL, and more C#',\n            startDate: '2019, 5, 1 00:00',\n            endDate: '2019, 8, 16 00:00',\n            percentComplete: 40\n          }]\n        }, {\n          category: 'Reading',\n          id: 2,\n          otherGoals: [{\n            id: 1,\n            title: 'Read a book',\n            snippit: 'Read the blade itself',\n            startDate: '2019, 7, 8 00:00',\n            endDate: '2019, 7, 30 00:00',\n            percentComplete: 0\n          }, {\n            id: 2,\n            title: 'Read 20 books',\n            snippit: \"Shouldn't be too hard he thought\",\n            startDate: '2019, 1, 1 00:00',\n            endDate: '2020, 1, 1 00:00',\n            percentComplete: 50\n          }]\n        }, {\n          category: 'Goal Tracker Project',\n          id: 3,\n          otherGoals: [{\n            id: 1,\n            title: 'Add Goal Adding',\n            snippit: 'Add Form and State Addition',\n            startDate: '2019, 7, 9 00:00',\n            endDate: '2019, 7, 11 00:00',\n            percentComplete: 0\n          }, {\n            id: 2,\n            title: 'Add Goal Deletion',\n            snippit: 'Add Form and State Deletion',\n            startDate: '2019, 7, 9 00:00',\n            endDate: '2019, 7, 11 00:00',\n            percentComplete: 0\n          }, {\n            id: 3,\n            title: 'Fix Small bugs',\n            snippit: 'SideNav Stuff',\n            startDate: '2019, 7, 9 00:00',\n            endDate: '2019, 7, 12 00:00',\n            percentComplete: 0\n          }, {\n            id: 4,\n            title: 'Add Sorting Box',\n            snippit: 'Should be easy after I learn add and delete stuff',\n            startDate: '2019, 7, 9 00:00',\n            endDate: '2019, 7, 12 00:00',\n            percentComplete: 0\n          }, {\n            id: 5,\n            title: 'Add Login and backend stuff',\n            snippit: 'This might be the hard part',\n            startDate: '2019, 7, 9 00:00',\n            endDate: '2019, 7, 19 00:00',\n            percentComplete: 0\n          }]\n        }],\n        completed: {\n          dailyGoals: [],\n          otherGoalsCategories: [{\n            category: 'Programming',\n            id: 1,\n            otherGoals: [{\n              id: 1,\n              title: 'Learn React',\n              snippit: 'Code a bunch of stuff',\n              startDate: '2019, 7, 1 00:00',\n              endDate: '2019, 7, 15 00:00',\n              percentComplete: 20\n            }]\n          }]\n        }\n      },\n      otherStuffs: {\n        overlayIsHidden: true,\n        renderCurrent: true,\n        renderCompleted: false,\n        renderDaily: true,\n        renderOther: true\n      }\n    };\n\n    this.deleteGoal = (key, category) => {\n      let state = this.state;\n      let toCompletedGoal;\n\n      if (category === 'daily') {\n        // sets filtered Arr to goal then filters out the deleted goal\n        let filteredArr = this.state.goals.dailyGoals;\n        this.state.goals.dailyGoals.map((goal, index) => {\n          if (goal.id === key) {\n            filteredArr.splice(index, 1);\n            toCompletedGoal = goal;\n          }\n\n          return true;\n        });\n        state.goals.dailyGoals = filteredArr;\n      } else {\n        //maps and finds category\n        this.state.goals.otherGoalsCategories.map((catagories, index) => {\n          if (catagories.category === category) {\n            // sets filtered Arr to goal then filters out the deleted goal\n            let filteredArr = this.state.goals.otherGoalsCategories[index].otherGoals; // Finds and removes goal\n\n            this.state.goals.otherGoalsCategories[index].otherGoals.map((goal, index) => {\n              if (goal.id === key) {\n                filteredArr.splice(index, 1);\n                toCompletedGoal = goal;\n              }\n\n              return true;\n            }); // sets local state\n\n            state.goals.otherGoalsCategories[index].otherGoals = filteredArr; //checks if category is empty\n\n            if (state.goals.otherGoalsCategories[index].otherGoals.length === 0) {\n              state.goals.otherGoalsCategories.splice(index, 1);\n            }\n          }\n\n          return true;\n        });\n      }\n\n      this.setState({\n        [state]: state\n      });\n      this.completed(toCompletedGoal, category);\n      return;\n    };\n\n    this.updateRenderIfs = whichClicked => {\n      let otherStuffs = this.state.otherStuffs;\n\n      if (this.state.otherStuffs[whichClicked] === false) {\n        otherStuffs[whichClicked] = true;\n      }\n\n      switch (whichClicked) {\n        case 'allTypes':\n          otherStuffs.renderDaily = true;\n          otherStuffs.renderOther = true;\n          break;\n\n        case 'renderCurrent':\n          if (this.state.otherStuffs.renderCompleted === true) {\n            otherStuffs.renderCompleted = false;\n          }\n\n          break;\n\n        case 'renderCompleted':\n          if (this.state.otherStuffs.renderCurrent === true) {\n            otherStuffs.renderCurrent = false;\n          }\n\n          break;\n\n        case 'renderDaily':\n          if (this.state.otherStuffs.renderOther === true) {\n            otherStuffs.renderOther = false;\n          }\n\n          break;\n\n        case 'renderOther':\n          if (this.state.otherStuffs.renderDaily === true) {\n            otherStuffs.renderDaily = false;\n          }\n\n          break;\n      }\n\n      this.setState({\n        otherStuffs: otherStuffs\n      });\n    };\n\n    this.completed = (newGoal, category) => {\n      let state = this.state; // check if daily\n\n      if (category === 'daily') {\n        state.goals.completed.dailyGoals.push(newGoal);\n      } else {\n        let newCategory = true; // true of false if new category\n\n        this.state.goals.completed.otherGoalsCategories.map((catagories, index) => {\n          if (catagories.category === category) {\n            state.goals.completed.otherGoalsCategories[index].otherGoals.push(newGoal);\n            newCategory = false;\n          }\n\n          return true;\n        }); //check if new category\n\n        if (newCategory === true) {\n          newGoal = {\n            category: category,\n            id: uuid.v4(),\n            otherGoals: [newGoal] // push to local state\n\n          };\n          state.goals.completed.otherGoalsCategories.push(newGoal);\n        }\n      } //push to state and close overlay\n\n\n      state.otherStuffs.overlayIsHidden = true;\n      this.setState({\n        state: state\n      });\n      return;\n    };\n\n    this.displayGoalOverlay = () => {\n      let state = this.state.otherStuffs;\n      state.overlayIsHidden = !state.overlayIsHidden;\n      this.setState({\n        [state.otherStuffs]: state\n      });\n    };\n\n    this.updateCheckMark = key => {\n      let state = this.state.goals;\n      state.dailyGoals.map((goal, index) => {\n        if (goal.id === key) {\n          state.dailyGoals[index].weeklyChecked[4] = !state.dailyGoals[index].weeklyChecked[4];\n          state.dailyGoals[index].weeklyChecked[4] ? state.dailyGoals[index].daysChecked++ : state.dailyGoals[index].daysChecked--;\n        }\n      });\n      this.setState({\n        [state.goals]: state\n      });\n      console.log(this.state.goals.dailyGoals);\n    };\n\n    this.stateAdd = newGoal => {\n      let state = this.state;\n      let startDate = getToday(); // check if daily\n\n      if (newGoal.type === 'daily') {\n        newGoal = {\n          id: uuid.v4(),\n          title: newGoal.title,\n          snippit: newGoal.snippit,\n          startDate: startDate,\n          endDate: newGoal.endDate + \" 00:00\",\n          daysChecked: 0,\n          weeklyChecked: [false, false, false, false, false, false, false] // push to local state\n\n        };\n        state.goals.dailyGoals.push(newGoal);\n      } else {\n        let category = newGoal.category; // the new category\n\n        let newCategory = newGoal.newCategory; // true of false if new category\n\n        newGoal = {\n          id: uuid.v4(),\n          title: newGoal.title,\n          snippit: newGoal.snippit,\n          startDate: startDate,\n          endDate: newGoal.endDate + \" 00:00\",\n          percentComplete: 0 //check if new category\n\n        };\n\n        if (newCategory === true) {\n          newGoal = {\n            category: category,\n            id: uuid.v4(),\n            otherGoals: [newGoal] // push to local state\n\n          };\n          state.goals.otherGoalsCategories.push(newGoal);\n        } else {\n          //finds category to add to\n          this.state.goals.otherGoalsCategories.map((catagories, index) => {\n            if (catagories.category === category) {\n              state.goals.otherGoalsCategories[index].otherGoals.push(newGoal);\n            }\n\n            return true;\n          });\n        }\n      } //push to state and close overlay\n\n\n      state.otherStuffs.overlayIsHidden = true;\n      this.setState({\n        state: state\n      });\n      return;\n    };\n\n    this.navSlideChange = () => {\n      const nav = document.querySelector('.sidenav');\n      nav.classList.toggle('nav-active');\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"sidenav\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"user\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: \"Images/profile.png\",\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }), React.createElement(\"a\", {\n      href: \"http://localhost:3000\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }, \"Guest\")), React.createElement(\"div\", {\n      className: \"navlinks\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"http://localhost:3000\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }, \"Dashboard\"), React.createElement(\"a\", {\n      href: \"http://localhost:3000\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }, \"Goals\"), React.createElement(\"a\", {\n      href: \"http://localhost:3000\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    }, \"Tasks\"), React.createElement(\"a\", {\n      href: \"http://localhost:3000\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }, \"Portfolio Home\"))), React.createElement(\"div\", {\n      className: \"topnav\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"navdropdown\",\n      onClick: this.navSlideChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"line1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"line2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"line3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    })), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }, \"Current Goals\"), React.createElement(\"div\", {\n      className: \"creategoalbutton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"button\",\n      onClick: this.displayGoalOverlay,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }, \"Create Goal\"))), React.createElement(\"div\", {\n      className: \"main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    }, React.createElement(TypeSelector, {\n      goals: this.state.goals,\n      updateRenderIfs: this.updateRenderIfs,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"goals\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"dailygoals\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }, this.state.otherStuffs.renderDaily && this.state.goals.dailyGoals.length !== 0 && React.createElement(DailyGoalHeading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"dailygoalslist\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }, this.state.otherStuffs.renderDaily && React.createElement(DailyGoals, {\n      updateCheckMark: this.updateCheckMark,\n      dailyGoals: this.state.goals.dailyGoals,\n      deleteGoal: this.deleteGoal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }))), this.state.otherStuffs.renderOther && React.createElement(OtherGoals, {\n      otherGoalCategories: this.state.goals.otherGoalsCategories,\n      deleteGoal: this.deleteGoal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    })), !this.state.otherStuffs.overlayIsHidden && React.createElement(Overlay, {\n      closeGoalOverlay: this.displayGoalOverlay,\n      otherGoalCategories: this.state.goals.completed.otherGoalsCategories,\n      stateAdd: this.stateAdd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Killian\\Desktop\\Projects\\Goal-Tracker\\reactappthingy\\my-app\\src\\App.js"],"names":["React","Component","DailyGoalHeading","DailyGoals","OtherGoals","Overlay","TypeSelector","uuid","getToday","bigIntLiteral","App","state","goals","dailyGoals","id","title","snippit","startDate","endDate","lastDayChecked","daysChecked","weeklyChecked","otherGoalsCategories","category","otherGoals","percentComplete","completed","otherStuffs","overlayIsHidden","renderCurrent","renderCompleted","renderDaily","renderOther","deleteGoal","key","toCompletedGoal","filteredArr","map","goal","index","splice","catagories","length","setState","updateRenderIfs","whichClicked","newGoal","push","newCategory","v4","displayGoalOverlay","updateCheckMark","console","log","stateAdd","type","navSlideChange","nav","document","querySelector","classList","toggle","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport './App.css'\nimport DailyGoalHeading from './DailyGoals/DailyGoalHeading'\nimport DailyGoals from './DailyGoals/DailyGoals'\nimport OtherGoals from './OtherGoals/OtherGoals'\nimport Overlay from './Overlay'\nimport TypeSelector from './TypeSelector'\nimport uuid from 'uuid'\nimport {getToday} from './commonCommands'\nimport { bigIntLiteral } from '@babel/types';\n\nclass App extends Component {\n    state = {\n        goals:{\n            dailyGoals : [\n                {\n                    id: 1,\n                    title: 'Programme',\n                    snippit: 'Write Code',\n                    startDate: '2019, 7, 1 00:00',\n                    endDate: '2019, 7, 30 00:00',\n                    lastDayChecked:'2019, 7, 14 00:00',\n                    daysChecked: 20,\n                    weeklyChecked: [true, false, true, true, false, false, false]\n                },\n                {\n                    id: 2,\n                    title: 'Learn React',\n                    snippit: 'Write Code',\n                    startDate: '2019, 7, 1 00:00',\n                    endDate: '2019, 7, 15 00:00',\n                    daysChecked: 20,\n                    weeklyChecked: [true, true, false, true, false, false, false]\n                },\n                {\n                    id: 3,\n                    title: 'Be Cool',\n                    snippit: 'Yea',\n                    startDate: '2019, 7, 1 00:00',\n                    endDate: '2019, 7, 15 00:00',\n                    daysChecked: 20,\n                    weeklyChecked: [false, true, true, true, false, false, false]\n                }\n            ],\n            otherGoalsCategories:[\n                {\n                    category: 'Programming',\n                    id: 1,\n                    otherGoals:[\n                        {\n                            id: 1,\n                            title: 'Learn React',\n                            snippit: 'Code a bunch of stuff',\n                            startDate: '2019, 7, 1 00:00',\n                            endDate: '2019, 7, 15 00:00',\n                            percentComplete: 20\n                        },\n                        {\n                            id: 2,\n                            title: 'Learn to Code',\n                            snippit: 'Learn React, C++, SQL, and more C#',\n                            startDate: '2019, 5, 1 00:00',\n                            endDate: '2019, 8, 16 00:00',\n                            percentComplete: 40\n                        }\n                    ]\n                },\n                {\n                    category: 'Reading',\n                    id: 2,\n                    otherGoals:[\n                        {\n                            id: 1,\n                            title: 'Read a book',\n                            snippit: 'Read the blade itself',\n                            startDate: '2019, 7, 8 00:00',\n                            endDate: '2019, 7, 30 00:00',\n                            percentComplete: 0\n                        },\n                        {\n                            id: 2,\n                            title: 'Read 20 books',\n                            snippit: \"Shouldn't be too hard he thought\",\n                            startDate: '2019, 1, 1 00:00',\n                            endDate: '2020, 1, 1 00:00',\n                            percentComplete: 50\n                        }\n                    ]\n                },\n                {\n                    category: 'Goal Tracker Project',\n                    id: 3,\n                    otherGoals:[\n                        {\n                            id: 1,\n                            title: 'Add Goal Adding',\n                            snippit: 'Add Form and State Addition',\n                            startDate: '2019, 7, 9 00:00',\n                            endDate: '2019, 7, 11 00:00',\n                            percentComplete: 0\n                        },\n                        {\n                            id: 2,\n                            title: 'Add Goal Deletion',\n                            snippit: 'Add Form and State Deletion',\n                            startDate: '2019, 7, 9 00:00',\n                            endDate: '2019, 7, 11 00:00',\n                            percentComplete: 0\n                        },\n                        {\n                            id: 3,\n                            title: 'Fix Small bugs',\n                            snippit: 'SideNav Stuff',\n                            startDate: '2019, 7, 9 00:00',\n                            endDate: '2019, 7, 12 00:00',\n                            percentComplete: 0\n                        },\n                        {\n                            id: 4,\n                            title: 'Add Sorting Box',\n                            snippit: 'Should be easy after I learn add and delete stuff',\n                            startDate: '2019, 7, 9 00:00',\n                            endDate: '2019, 7, 12 00:00',\n                            percentComplete: 0\n                        },\n                        {\n                            id: 5,\n                            title: 'Add Login and backend stuff',\n                            snippit: 'This might be the hard part',\n                            startDate: '2019, 7, 9 00:00',\n                            endDate: '2019, 7, 19 00:00',\n                            percentComplete: 0\n                        }\n\n                    ]\n                }\n            ],\n            completed : {\n                dailyGoals : [\n                ],\n                otherGoalsCategories : [\n                    {\n                        category: 'Programming',\n                        id: 1,\n                        otherGoals:[\n                            {\n                                id: 1,\n                                title: 'Learn React',\n                                snippit: 'Code a bunch of stuff',\n                                startDate: '2019, 7, 1 00:00',\n                                endDate: '2019, 7, 15 00:00',\n                                percentComplete: 20\n                            }\n                        ]\n                    }\n                ]\n            }\n        },\n        otherStuffs:{\n            overlayIsHidden: true,\n            renderCurrent: true,\n            renderCompleted: false,\n            renderDaily: true,\n            renderOther: true,\n        }\n    }\n\n    deleteGoal = (key, category) => {\n        let state = this.state;\n        let toCompletedGoal;\n        if(category === 'daily'){\n            // sets filtered Arr to goal then filters out the deleted goal\n            let filteredArr = this.state.goals.dailyGoals;\n            this.state.goals.dailyGoals.map((goal, index) =>{\n                if(goal.id === key){\n                    filteredArr.splice(index, 1);\n                    toCompletedGoal = goal;\n                }\n                return true;\n            })\n            state.goals.dailyGoals = filteredArr\n        }\n        else{\n            //maps and finds category\n            this.state.goals.otherGoalsCategories.map((catagories, index) => {\n                if(catagories.category === category){\n                    // sets filtered Arr to goal then filters out the deleted goal\n                    let filteredArr = this.state.goals.otherGoalsCategories[index].otherGoals;\n                    // Finds and removes goal\n                    this.state.goals.otherGoalsCategories[index].otherGoals.map((goal, index) =>{\n                        if(goal.id === key){\n                            filteredArr.splice(index, 1);\n                            toCompletedGoal = goal;\n                        }\n                        return true;\n                    })\n                    // sets local state\n                    state.goals.otherGoalsCategories[index].otherGoals = filteredArr\n                    //checks if category is empty\n                    if((state.goals.otherGoalsCategories[index].otherGoals).length === 0){\n                        state.goals.otherGoalsCategories.splice(index, 1);\n                    }\n                }\n                return true;\n            })\n        }\n        this.setState({\n            [state]: state\n        })\n        this.completed(toCompletedGoal, category)\n        return;\n    }\n    updateRenderIfs = (whichClicked) => {\n        let otherStuffs = this.state.otherStuffs\n        if(this.state.otherStuffs[whichClicked] === false){\n            otherStuffs[whichClicked] = true;\n        }\n        switch(whichClicked){\n            case('allTypes'):\n                otherStuffs.renderDaily = true;\n                otherStuffs.renderOther = true;\n                break;\n            case('renderCurrent'):\n                if(this.state.otherStuffs.renderCompleted === true){\n                    otherStuffs.renderCompleted = false;\n                }\n                break;\n            case('renderCompleted'):\n                if(this.state.otherStuffs.renderCurrent === true){\n                    otherStuffs.renderCurrent = false;\n                }\n                break;\n            case('renderDaily'):\n                if(this.state.otherStuffs.renderOther === true){\n                    otherStuffs.renderOther = false;\n                }\n                break;\n            case('renderOther'):\n                if(this.state.otherStuffs.renderDaily === true){\n                    otherStuffs.renderDaily = false;\n                }\n                break;\n        }\n        this.setState({\n            otherStuffs: otherStuffs\n        })\n    }\n    completed = (newGoal, category) => {\n        let state = this.state\n        // check if daily\n        if(category === 'daily'){\n            state.goals.completed.dailyGoals.push(newGoal);\n        }\n        else{\n            let newCategory = true; // true of false if new category\n\n            this.state.goals.completed.otherGoalsCategories.map((catagories, index) => {\n                if(catagories.category === category){\n                    state.goals.completed.otherGoalsCategories[index].otherGoals.push(newGoal)\n                    newCategory = false;\n                }\n                return true;\n            })\n            //check if new category\n            if(newCategory === true){\n                newGoal = {\n                    category: category,\n                    id: uuid.v4(),\n                    otherGoals: [\n                        newGoal\n                    ]\n                }\n                // push to local state\n                state.goals.completed.otherGoalsCategories.push(newGoal);\n            }\n        }\n        //push to state and close overlay\n        state.otherStuffs.overlayIsHidden = true;\n        this.setState({\n            state: state\n            })\n        return;\n    }\n    displayGoalOverlay = () => {\n        let state = this.state.otherStuffs\n        state.overlayIsHidden = !state.overlayIsHidden;\n        this.setState({\n            [state.otherStuffs]: state\n          })\n    }\n    updateCheckMark = (key) => {\n        let state = this.state.goals;\n        state.dailyGoals.map((goal, index) => {\n            if(goal.id === key){\n                state.dailyGoals[index].weeklyChecked[4] = !state.dailyGoals[index].weeklyChecked[4]\n                state.dailyGoals[index].weeklyChecked[4] ? state.dailyGoals[index].daysChecked++ : state.dailyGoals[index].daysChecked--\n            } \n        })\n        this.setState({\n            [state.goals]: state\n        })\n        console.log(this.state.goals.dailyGoals)\n    }\n    stateAdd = (newGoal) => {\n        let state = this.state\n        let startDate = getToday()\n        // check if daily\n        if(newGoal.type === 'daily'){\n            newGoal = {\n                id: uuid.v4(),\n                title: newGoal.title,\n                snippit: newGoal.snippit,\n                startDate: startDate,\n                endDate: newGoal.endDate + \" 00:00\",\n                daysChecked: 0,\n                weeklyChecked: [false, false, false, false, false, false, false]\n            }\n            // push to local state\n            state.goals.dailyGoals.push(newGoal);\n        }\n        else{\n            let category = newGoal.category; // the new category\n            let newCategory = newGoal.newCategory; // true of false if new category\n            newGoal = {\n                id: uuid.v4(),\n                title: newGoal.title,\n                snippit: newGoal.snippit,\n                startDate: startDate,\n                endDate: newGoal.endDate + \" 00:00\",\n                percentComplete: 0\n            }\n            //check if new category\n            if(newCategory === true){\n                newGoal = {\n                    category: category,\n                    id: uuid.v4(),\n                    otherGoals: [\n                        newGoal\n                    ]\n                }\n                // push to local state\n                state.goals.otherGoalsCategories.push(newGoal);\n            }\n            else{\n                //finds category to add to\n                this.state.goals.otherGoalsCategories.map((catagories, index) => {\n                    if(catagories.category === category){\n                        state.goals.otherGoalsCategories[index].otherGoals.push(newGoal)\n                    }\n                    return true;\n                })\n            }\n        }\n        //push to state and close overlay\n        state.otherStuffs.overlayIsHidden = true;\n        this.setState({\n            state: state\n        })\n        return;\n    }\n    navSlideChange = ()=>{\n        const nav = document.querySelector('.sidenav');\n        nav.classList.toggle('nav-active');\n    }\n    render() {\n        return (\n            <div>\n            <div className=\"sidenav\">\n                <div className=\"user\">\n                    <img src=\"Images/profile.png\" alt=\"\"/>\n                    <a href=\"http://localhost:3000\">Guest</a>\n                </div>\n                <div className=\"navlinks\">\n                    <a href= \"http://localhost:3000\" >Dashboard</a>\n                    <a href= \"http://localhost:3000\" >Goals</a>\n                    <a href= \"http://localhost:3000\" >Tasks</a>\n                    <a href=\"http://localhost:3000\" >Portfolio Home</a>\n                </div>\n            </div>\n            <div className=\"topnav\">\n                <div className = \"navdropdown\" onClick={this.navSlideChange}>\n                    <div className=\"line1\"></div>\n                    <div className=\"line2\"></div>\n                    <div className=\"line3\"></div>\n                </div>\n                <h1>Current Goals</h1>\n                <div className=\"creategoalbutton\">\n                        <button id=\"button\" onClick={this.displayGoalOverlay}>Create Goal</button>\n                </div>\n            </div>\n            <div className=\"main\">\n\n                <TypeSelector goals={this.state.goals} updateRenderIfs={this.updateRenderIfs}/>\n                <div className=\"goals\">\n                    <div className=\"dailygoals\">\n                        {this.state.otherStuffs.renderDaily && this.state.goals.dailyGoals.length !== 0 && <DailyGoalHeading/>}\n                        <div className=\"dailygoalslist\">\n                         {this.state.otherStuffs.renderDaily && <DailyGoals updateCheckMark={this.updateCheckMark} dailyGoals={this.state.goals.dailyGoals} deleteGoal={this.deleteGoal} />}\n                        </div>\n                    </div>\n                    {this.state.otherStuffs.renderOther && <OtherGoals otherGoalCategories={this.state.goals.otherGoalsCategories} deleteGoal={this.deleteGoal} />}\n                </div>\n                {/* Need new classes for these unless I componentDidMount map the dates n stuff */}\n                {/* <div className=\"goals\">\n                    <div className=\"dailygoals\">\n                        {this.state.otherStuffs.renderDaily && this.state.goals.completed.dailyGoals.length !== 0 &&<DailyGoalHeading />}\n                        <div className=\"dailygoalslist\">\n                         {this.state.otherStuffs.renderDaily && this.state.goals.completed.dailyGoals.length !==  0 &&<DailyGoals dailyGoals={this.state.goals.completed.dailyGoals} deleteGoal={this.deleteGoal} />}\n                        </div>\n                    </div>\n                    {this.state.otherStuffs.renderOther && this.state.goals.completed.otherGoalsCategories.length !== 0 && <OtherGoals otherGoalCategories={this.state.goals.completed.otherGoalsCategories} deleteGoal={this.deleteGoal} />}\n                </div> */}\n                {!this.state.otherStuffs.overlayIsHidden && <Overlay closeGoalOverlay={this.displayGoalOverlay} otherGoalCategories={this.state.goals.completed.otherGoalsCategories} stateAdd={this.stateAdd} />}\n            </div>\n    </div>\n    );\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}