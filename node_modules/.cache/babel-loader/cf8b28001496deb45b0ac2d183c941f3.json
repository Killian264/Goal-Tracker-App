{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Killian\\\\Desktop\\\\Projects\\\\Goal-Tracker\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport DailyGoalHeading from './DailyGoals/DailyGoalHeading';\nimport DailyGoals from './DailyGoals/DailyGoals';\nimport OtherGoals from './OtherGoals/OtherGoals';\nimport TypeSelector from './TypeSelector';\nimport uuid from 'uuid';\nimport Overlay from './Overlay';\nimport { getToday, getYeseterday } from './commonCommands';\nimport CompletedDailyGoals from './CompletedGoals/DailyGoals/DailyGoals';\nimport CompletedOtherGoals from './CompletedGoals/OtherGoals/OtherGoals';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      goals: {\n        dailyGoals: [],\n        otherGoalsCategories: [{\n          category: 'Programming',\n          id: 4,\n          otherGoals: [{\n            id: 5,\n            title: 'Learn React',\n            snippit: 'Code a bunch of stuff',\n            startDate: '2019, 7, 1 00:00',\n            endDate: '2019, 7, 15 00:00',\n            percentComplete: 20\n          }, {\n            id: 6,\n            title: 'Learn to Code',\n            snippit: 'Learn React, C++, SQL, and more C#',\n            startDate: '2019, 5, 1 00:00',\n            endDate: '2019, 8, 16 00:00',\n            percentComplete: 40\n          }]\n        }, {\n          category: 'Reading',\n          id: 7,\n          otherGoals: [{\n            id: 8,\n            title: 'Read a book',\n            snippit: 'Read the blade itself',\n            startDate: '2019, 7, 8 00:00',\n            endDate: '2019, 7, 30 00:00',\n            percentComplete: 0\n          }, {\n            id: 9,\n            title: 'Read 20 books',\n            snippit: \"Shouldn't be too hard he thought\",\n            startDate: '2019, 1, 1 00:00',\n            endDate: '2020, 1, 1 00:00',\n            percentComplete: 50\n          }]\n        }, {\n          category: 'Goal Tracker Project',\n          id: 10,\n          otherGoals: [{\n            id: 11,\n            title: 'Add Goal Adding',\n            snippit: 'Add Form and State Addition',\n            startDate: '2019, 7, 9 00:00',\n            endDate: '2019, 7, 11 00:00',\n            percentComplete: 0\n          }, {\n            id: 12,\n            title: 'Add Goal Deletion',\n            snippit: 'Add Form and State Deletion',\n            startDate: '2019, 7, 9 00:00',\n            endDate: '2019, 7, 11 00:00',\n            percentComplete: 0\n          }, {\n            id: 13,\n            title: 'Fix Small bugs',\n            snippit: 'SideNav Stuff',\n            startDate: '2019, 7, 9 00:00',\n            endDate: '2019, 7, 12 00:00',\n            percentComplete: 0\n          }, {\n            id: 14,\n            title: 'Add Sorting Box',\n            snippit: 'Should be easy after I learn add and delete stuff',\n            startDate: '2019, 7, 9 00:00',\n            endDate: '2019, 7, 12 00:00',\n            percentComplete: 0\n          }, {\n            id: 15,\n            title: 'Add Login and backend stuff',\n            snippit: 'This might be the hard part',\n            startDate: '2019, 7, 9 00:00',\n            endDate: '2019, 7, 19 00:00',\n            percentComplete: 0\n          }]\n        }],\n        completed: {\n          dailyGoals: [],\n          otherGoalsCategories: [{\n            category: 'Programming',\n            id: 16,\n            otherGoals: [{\n              id: 17,\n              title: 'Learn React',\n              snippit: 'Code a bunch of stuff',\n              startDate: '2019, 7, 1 00:00',\n              endDate: '2019, 7, 15 00:00',\n              percentComplete: 20\n            }]\n          }]\n        }\n      },\n      otherStuffs: {\n        overlayIsHidden: true,\n        renderCurrent: true,\n        renderCompleted: false,\n        renderDaily: true,\n        renderOther: true\n      }\n    };\n\n    this.updateLastUpdated = (goal, numDays) => {\n      if (numDays > 5) {\n        goal.lastDayUpdated = getToday();\n        goal.weeklyChecked = [false, false, false, false, false, false, false];\n      } else {\n        goal.lastDayUpdated = getToday();\n        let weeklyChecked = [false, false, false, false, false, false, false];\n\n        for (let i = 0; i < 5 - numDays; i++) {\n          weeklyChecked[i] = goal.weeklyChecked[i + numDays];\n        }\n\n        goal.weeklyChecked = weeklyChecked;\n      }\n\n      return goal;\n    };\n\n    this.deleteGoal = (key, category) => {\n      let state = this.state;\n      let toCompletedGoal;\n\n      if (category === 'daily') {\n        let filteredArr = this.state.goals.dailyGoals;\n        let index = this.mapFunc(this.state.goals.dailyGoals, 'id', key);\n        toCompletedGoal = this.state.goals.dailyGoals[index];\n        filteredArr.splice(index, 1);\n        state.goals.dailyGoals = filteredArr;\n      } else {\n        //maps and finds category\n        this.state.goals.otherGoalsCategories.forEach((catagories, index) => {\n          if (catagories.category === category) {\n            // sets filtered Arr to goal then filters out the deleted goal\n            let filteredArr = this.state.goals.otherGoalsCategories[index].otherGoals; // Finds and removes goal\n\n            this.state.goals.otherGoalsCategories[index].otherGoals.forEach((goal, index) => {\n              if (goal.id === key) {\n                filteredArr.splice(index, 1);\n                toCompletedGoal = goal;\n              }\n\n              return true;\n            }); // sets local state\n\n            state.goals.otherGoalsCategories[index].otherGoals = filteredArr; //checks if category is empty\n\n            if (state.goals.otherGoalsCategories[index].otherGoals.length === 0) {\n              state.goals.otherGoalsCategories.splice(index, 1);\n            }\n          }\n\n          return true;\n        });\n      }\n\n      this.setState({\n        [state]: state\n      });\n      this.completed(toCompletedGoal, category);\n      return;\n    };\n\n    this.updateRenderIfs = whichClicked => {\n      let otherStuffs = this.state.otherStuffs;\n\n      if (this.state.otherStuffs[whichClicked] === false) {\n        otherStuffs[whichClicked] = true;\n      } // switch to determine sort goals stuff can probably simplify\n\n\n      switch (whichClicked) {\n        case 'allTypes':\n          otherStuffs.renderDaily = true;\n          otherStuffs.renderOther = true;\n          break;\n\n        case 'renderCurrent':\n          if (this.state.otherStuffs.renderCompleted === true) {\n            otherStuffs.renderCompleted = false;\n          }\n\n          break;\n\n        case 'renderCompleted':\n          if (this.state.otherStuffs.renderCurrent === true) {\n            otherStuffs.renderCurrent = false;\n          }\n\n          break;\n\n        case 'renderDaily':\n          if (this.state.otherStuffs.renderOther === true) {\n            otherStuffs.renderOther = false;\n          }\n\n          break;\n\n        case 'renderOther':\n          if (this.state.otherStuffs.renderDaily === true) {\n            otherStuffs.renderDaily = false;\n          }\n\n          break;\n\n        default:\n          break;\n      }\n\n      this.setState({\n        otherStuffs: otherStuffs\n      });\n    };\n\n    this.completed = (newGoal, category) => {\n      let state = this.state;\n\n      if (category === 'daily') {\n        let endDate = new Date(newGoal.endDate);\n        let totalDays = Math.abs(new Date(newGoal.startDate) - endDate) / 8.64e+7;\n        newGoal = {\n          id: newGoal.id,\n          title: newGoal.title,\n          snippit: newGoal.snippit,\n          startDate: newGoal.startDate,\n          endDate: newGoal.endDate,\n          daysChecked: newGoal.daysChecked,\n          percentComplete: (newGoal.daysChecked / totalDays * 100).toString().substr(0, 2)\n        };\n        state.goals.completed.dailyGoals.push(newGoal);\n      } else {\n        let newCategory = true; // true of false if new category\n        // checks for category and pushes to category if it finds it\n\n        let index = this.mapFunc(this.state.goals.completed.otherGoalsCategories, 'category', category);\n\n        if (index !== null) {\n          state.goals.completed.otherGoalsCategories[index].otherGoals.push(newGoal);\n          newCategory = false;\n        } //makes new category and pushes\n\n\n        if (newCategory === true) {\n          newGoal = {\n            category: category,\n            id: uuid.v4(),\n            otherGoals: [newGoal] // push to local state\n\n          };\n          state.goals.completed.otherGoalsCategories.push(newGoal);\n        }\n      } //push to state and close overlay\n\n\n      state.otherStuffs.overlayIsHidden = true;\n      this.setState({\n        state: state\n      });\n      return;\n    };\n\n    this.displayGoalOverlay = () => {\n      let state = this.state.otherStuffs;\n      state.overlayIsHidden = !state.overlayIsHidden;\n      this.setState({\n        [state.otherStuffs]: state\n      });\n    };\n\n    this.updateCheckMark = key => {\n      let state = this.state.goals; //finds index of item\n\n      let index = this.mapFunc(state.dailyGoals, 'id', key); //updates index\n\n      state.dailyGoals[index].weeklyChecked[4] = !state.dailyGoals[index].weeklyChecked[4];\n      state.dailyGoals[index].weeklyChecked[4] ? state.dailyGoals[index].daysChecked++ : state.dailyGoals[index].daysChecked--;\n      this.setState({\n        [state.goals]: state\n      });\n    };\n\n    this.stateAdd = newGoal => {\n      let state = this.state;\n      let startDate = getToday(); // check if daily\n\n      if (newGoal.type === 'daily') {\n        newGoal = {\n          id: uuid.v4(),\n          title: newGoal.title,\n          snippit: newGoal.snippit,\n          startDate: startDate,\n          endDate: newGoal.endDate + \" 00:00\",\n          lastDayUpdated: startDate,\n          daysChecked: 0,\n          weeklyChecked: [false, false, false, false, false, false, false] // push to local state\n\n        };\n        state.goals.dailyGoals.push(newGoal);\n      } else {\n        let category = newGoal.category; // the new category\n\n        let newCategory = newGoal.newCategory; // true of false if new category\n\n        newGoal = {\n          id: uuid.v4(),\n          title: newGoal.title,\n          snippit: newGoal.snippit,\n          startDate: startDate,\n          endDate: newGoal.endDate + \" 00:00\",\n          percentComplete: 0 //check if new category\n\n        };\n\n        if (newCategory === true) {\n          newGoal = {\n            category: category,\n            id: uuid.v4(),\n            otherGoals: [newGoal] // push to local state\n\n          };\n          state.goals.otherGoalsCategories.push(newGoal);\n        } else {\n          //finds category to add to\n          let index = this.mapFunc(this.state.goals.otherGoalsCategories, 'category', category);\n          state.goals.otherGoalsCategories[index].otherGoals.push(newGoal);\n        }\n      } //push to state and close overlay\n\n\n      state.otherStuffs.overlayIsHidden = true;\n      this.setState({\n        state: state\n      });\n      return;\n    };\n\n    this.navSlideChange = () => {\n      const nav = document.querySelector('.sidenav');\n      nav.classList.toggle('nav-active');\n    };\n\n    this.updateDaily = () => {\n      let state = this.state;\n      let numDays = (Date.parse(state.goals.dailyGoals[0].lastDayUpdated) - Date.parse(getToday())) / 8.64e+7 * -1;\n\n      if (numDays > 5) {\n        state.goals.dailyGoals.forEach(goal => {\n          goal.lastDayUpdated = getToday();\n          goal.weeklyChecked = [false, false, false, false, false, false, false];\n        });\n      } else {\n        state.goals.dailyGoals.forEach(goal => {\n          goal.lastDayUpdated = getToday();\n          let weeklyChecked = [false, false, false, false, false, false, false];\n\n          for (let i = 0; i < 5 - numDays; i++) {\n            weeklyChecked[i] = goal.weeklyChecked[i + numDays];\n          }\n\n          goal.weeklyChecked = weeklyChecked;\n        });\n      }\n\n      this.setState({\n        state: state\n      });\n      return;\n    };\n\n    this.addPercentage = (id, category) => {\n      let state = this.state;\n      let categoryIndex = this.mapFunc(this.state.goals.otherGoalsCategories, 'category', category);\n      let goalIndex = this.mapFunc(this.state.goals.otherGoalsCategories[categoryIndex].otherGoals, 'id', id);\n      state.goals.otherGoalsCategories[categoryIndex].otherGoals[goalIndex].percentComplete += 2;\n\n      if (state.goals.otherGoalsCategories[categoryIndex].otherGoals[goalIndex].percentComplete > 99) {\n        this.deleteGoal(id, category);\n      } else {\n        this.setState({\n          state: state\n        });\n      }\n    };\n\n    this.subtractPercentage = (id, category) => {\n      let state = this.state;\n      let categoryIndex = this.mapFunc(this.state.goals.otherGoalsCategories, 'category', category);\n      let goalIndex = this.mapFunc(this.state.goals.otherGoalsCategories[categoryIndex].otherGoals, 'id', id);\n\n      if (state.goals.otherGoalsCategories[categoryIndex].otherGoals[goalIndex].percentComplete <= 0) {\n        return;\n      } else {\n        state.goals.otherGoalsCategories[categoryIndex].otherGoals[goalIndex].percentComplete += -2;\n        this.setState({\n          state: state\n        });\n      }\n    };\n\n    this.mapFunc = (list, category, find) => {\n      for (let i = 0; i < list.length; i++) {\n        if (list[i][category] === find) {\n          return i;\n        }\n      }\n\n      return null;\n    };\n  }\n\n  componentDidMount() {\n    let localState = this.state;\n    let updatedDailyGoals = []; // if(this.state.goals.dailyGoals !== null){\n    //     this.state.goals.dailyGoals.forEach(goal => {\n    //         if(Date.parse(goal.endDate) <= Date.parse(getYeseterday())){\n    //             localState.goals.completed.dailyGoals.push(this.changeDailyToCompleted(goal))\n    //         }\n    //         else{\n    //             if(Date.parse(goal.lastDayUpdated) < Date.parse(getToday())){\n    //                 let numDays = (((Date.parse(goal.lastDayUpdated) - Date.parse(getToday()))/ 8.64e+7) * -1)\n    //                 updatedDailyGoals.push(this.updateLastUpdated(goal, numDays))\n    //             }   \n    //         }\n    //     })\n    //     localState.goals.dailyGoals = updatedDailyGoals;\n    //     this.setState({\n    //         state: localState\n    //     })\n    // }\n\n    this.state.goals.dailyGoals.forEach(goal => {\n      if (Date.parse(goal.endDate) <= Date.parse(getYeseterday())) {\n        localState.goals.completed.dailyGoals.push(this.changeDailyToCompleted(goal));\n      } else {\n        if (Date.parse(goal.lastDayUpdated) < Date.parse(getToday())) {\n          let numDays = (Date.parse(goal.lastDayUpdated) - Date.parse(getToday())) / 8.64e+7 * -1;\n          updatedDailyGoals.push(this.updateLastUpdated(goal, numDays));\n        }\n      }\n    });\n    localState.goals.dailyGoals = updatedDailyGoals;\n    this.setState({\n      state: localState\n    });\n  }\n\n  changeDailyToCompleted(newGoal) {\n    let endDate = new Date(newGoal.endDate);\n    let totalDays = Math.abs(new Date(newGoal.startDate) - endDate) / 8.64e+7;\n    newGoal = {\n      id: newGoal.id,\n      title: newGoal.title,\n      snippit: newGoal.snippit,\n      startDate: newGoal.startDate,\n      endDate: newGoal.endDate,\n      daysChecked: newGoal.daysChecked,\n      percentComplete: (newGoal.daysChecked / totalDays * 100).toString().substr(0, 2) // let newCategory = true // true of false if new category\n      // // checks for category and pushes to category if it finds it\n      // let index = this.mapFunc(this.state.goals.completed.otherGoalsCategories, 'category', category)\n      // if(index !== null){\n      //     state.goals.completed.otherGoalsCategories[index].otherGoals.push(newGoal)\n      //         newCategory = false;\n      // }\n      // //makes new category and pushes\n      // if(newCategory === true){\n      //     newGoal = {\n      //         category: category,\n      //         id: uuid.v4(),\n      //         otherGoals: [\n      //             newGoal\n      //         ]\n      //     }\n      // }\n\n    };\n    return newGoal;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"sidenav\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"user\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: \"Images/profile.png\",\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495\n      },\n      __self: this\n    }), React.createElement(\"a\", {\n      href: \"http://localhost:3000\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496\n      },\n      __self: this\n    }, \"Guest\")), React.createElement(\"div\", {\n      className: \"navlinks\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"http://localhost:3000\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499\n      },\n      __self: this\n    }, \"Dashboard\"), React.createElement(\"a\", {\n      href: \"http://localhost:3000\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500\n      },\n      __self: this\n    }, \"Goals\"), React.createElement(\"a\", {\n      href: \"http://localhost:3000\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501\n      },\n      __self: this\n    }, \"Tasks\"), React.createElement(\"a\", {\n      href: \"http://localhost:3000\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502\n      },\n      __self: this\n    }, \"Portfolio Home\"))), React.createElement(\"div\", {\n      className: \"topnav\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"navdropdown\",\n      onClick: this.navSlideChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"line1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"line2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"line3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509\n      },\n      __self: this\n    })), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511\n      },\n      __self: this\n    }, \"Current Goals\"), React.createElement(\"div\", {\n      className: \"creategoalbutton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"button\",\n      onClick: this.displayGoalOverlay,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513\n      },\n      __self: this\n    }, \"Create Goal\"))), React.createElement(\"div\", {\n      className: \"main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }, React.createElement(TypeSelector, {\n      goals: this.state.goals,\n      updateRenderIfs: this.updateRenderIfs,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"goals\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"dailygoals\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }, this.state.otherStuffs.renderDaily && this.state.goals.dailyGoals.length !== 0 && this.state.otherStuffs.renderCurrent && React.createElement(DailyGoalHeading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"dailygoalslist\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521\n      },\n      __self: this\n    }, this.state.otherStuffs.renderDaily && this.state.goals.completed.dailyGoals.length !== 0 && this.state.otherStuffs.renderCompleted && React.createElement(CompletedDailyGoals, {\n      dailyGoals: this.state.goals.completed.dailyGoals,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522\n      },\n      __self: this\n    }), this.state.otherStuffs.renderDaily && this.state.otherStuffs.renderCurrent && this.state.goals.dailyGoals.length !== 0 && React.createElement(DailyGoals, {\n      updateCheckMark: this.updateCheckMark,\n      dailyGoals: this.state.goals.dailyGoals,\n      deleteGoal: this.deleteGoal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }))), this.state.otherStuffs.renderOther && this.state.otherStuffs.renderCurrent && this.state.goals.otherGoalsCategories.length !== 0 && React.createElement(OtherGoals, {\n      otherGoalCategories: this.state.goals.otherGoalsCategories,\n      deleteGoal: this.deleteGoal,\n      addPercentage: this.addPercentage,\n      subtractPercentage: this.subtractPercentage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526\n      },\n      __self: this\n    }), this.state.otherStuffs.renderOther && this.state.goals.completed.otherGoalsCategories.length !== 0 && this.state.otherStuffs.renderCompleted && React.createElement(CompletedOtherGoals, {\n      otherGoalCategories: this.state.goals.completed.otherGoalsCategories,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527\n      },\n      __self: this\n    })), !this.state.otherStuffs.overlayIsHidden && React.createElement(Overlay, {\n      otherGoalCategories: this.state.goals.otherGoalsCategories,\n      closeGoalOverlay: this.displayGoalOverlay,\n      stateAdd: this.stateAdd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Killian\\Desktop\\Projects\\Goal-Tracker\\src\\App.js"],"names":["React","Component","DailyGoalHeading","DailyGoals","OtherGoals","TypeSelector","uuid","Overlay","getToday","getYeseterday","CompletedDailyGoals","CompletedOtherGoals","App","state","goals","dailyGoals","otherGoalsCategories","category","id","otherGoals","title","snippit","startDate","endDate","percentComplete","completed","otherStuffs","overlayIsHidden","renderCurrent","renderCompleted","renderDaily","renderOther","updateLastUpdated","goal","numDays","lastDayUpdated","weeklyChecked","i","deleteGoal","key","toCompletedGoal","filteredArr","index","mapFunc","splice","forEach","catagories","length","setState","updateRenderIfs","whichClicked","newGoal","Date","totalDays","Math","abs","daysChecked","toString","substr","push","newCategory","v4","displayGoalOverlay","updateCheckMark","stateAdd","type","navSlideChange","nav","document","querySelector","classList","toggle","updateDaily","parse","addPercentage","categoryIndex","goalIndex","subtractPercentage","list","find","componentDidMount","localState","updatedDailyGoals","changeDailyToCompleted","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport './App.css'\nimport DailyGoalHeading from './DailyGoals/DailyGoalHeading'\nimport DailyGoals from './DailyGoals/DailyGoals'\nimport OtherGoals from './OtherGoals/OtherGoals'\nimport TypeSelector from './TypeSelector'\nimport uuid from 'uuid'\nimport Overlay from './Overlay'\nimport {getToday, getYeseterday} from './commonCommands'\nimport CompletedDailyGoals from './CompletedGoals/DailyGoals/DailyGoals'\nimport CompletedOtherGoals from './CompletedGoals/OtherGoals/OtherGoals'\n\nclass App extends Component {\n    state = {\n        goals:{\n            dailyGoals : [\n            ],\n            otherGoalsCategories:[\n                {\n                    category: 'Programming',\n                    id: 4,\n                    otherGoals:[\n                        {\n                            id: 5,\n                            title: 'Learn React',\n                            snippit: 'Code a bunch of stuff',\n                            startDate: '2019, 7, 1 00:00',\n                            endDate: '2019, 7, 15 00:00',\n                            percentComplete: 20\n                        },\n                        {\n                            id: 6,\n                            title: 'Learn to Code',\n                            snippit: 'Learn React, C++, SQL, and more C#',\n                            startDate: '2019, 5, 1 00:00',\n                            endDate: '2019, 8, 16 00:00',\n                            percentComplete: 40\n                        }\n                    ]\n                },\n                {\n                    category: 'Reading',\n                    id: 7,\n                    otherGoals:[\n                        {\n                            id: 8,\n                            title: 'Read a book',\n                            snippit: 'Read the blade itself',\n                            startDate: '2019, 7, 8 00:00',\n                            endDate: '2019, 7, 30 00:00',\n                            percentComplete: 0\n                        },\n                        {\n                            id: 9,\n                            title: 'Read 20 books',\n                            snippit: \"Shouldn't be too hard he thought\",\n                            startDate: '2019, 1, 1 00:00',\n                            endDate: '2020, 1, 1 00:00',\n                            percentComplete: 50\n                        }\n                    ]\n                },\n                {\n                    category: 'Goal Tracker Project',\n                    id: 10,\n                    otherGoals:[\n                        {\n                            id: 11,\n                            title: 'Add Goal Adding',\n                            snippit: 'Add Form and State Addition',\n                            startDate: '2019, 7, 9 00:00',\n                            endDate: '2019, 7, 11 00:00',\n                            percentComplete: 0\n                        },\n                        {\n                            id: 12,\n                            title: 'Add Goal Deletion',\n                            snippit: 'Add Form and State Deletion',\n                            startDate: '2019, 7, 9 00:00',\n                            endDate: '2019, 7, 11 00:00',\n                            percentComplete: 0\n                        },\n                        {\n                            id: 13,\n                            title: 'Fix Small bugs',\n                            snippit: 'SideNav Stuff',\n                            startDate: '2019, 7, 9 00:00',\n                            endDate: '2019, 7, 12 00:00',\n                            percentComplete: 0\n                        },\n                        {\n                            id: 14,\n                            title: 'Add Sorting Box',\n                            snippit: 'Should be easy after I learn add and delete stuff',\n                            startDate: '2019, 7, 9 00:00',\n                            endDate: '2019, 7, 12 00:00',\n                            percentComplete: 0\n                        },\n                        {\n                            id: 15,\n                            title: 'Add Login and backend stuff',\n                            snippit: 'This might be the hard part',\n                            startDate: '2019, 7, 9 00:00',\n                            endDate: '2019, 7, 19 00:00',\n                            percentComplete: 0\n                        }\n\n                    ]\n                }\n            ],\n            completed : {\n                dailyGoals : [\n                    \n                ],\n                otherGoalsCategories : [\n                    {\n                        category: 'Programming',\n                        id: 16,\n                        otherGoals:[\n                            {\n                                id: 17,\n                                title: 'Learn React',\n                                snippit: 'Code a bunch of stuff',\n                                startDate: '2019, 7, 1 00:00',\n                                endDate: '2019, 7, 15 00:00',\n                                percentComplete: 20\n                            }\n                        ]\n                    }\n                ]\n            }\n        },\n        otherStuffs:{\n            overlayIsHidden: true,\n            renderCurrent: true,\n            renderCompleted: false,\n            renderDaily: true,\n            renderOther: true,\n        }\n    }\n    componentDidMount(){\n        let localState = this.state\n        let updatedDailyGoals= [];\n        // if(this.state.goals.dailyGoals !== null){\n        //     this.state.goals.dailyGoals.forEach(goal => {\n        //         if(Date.parse(goal.endDate) <= Date.parse(getYeseterday())){\n        //             localState.goals.completed.dailyGoals.push(this.changeDailyToCompleted(goal))\n        //         }\n        //         else{\n        //             if(Date.parse(goal.lastDayUpdated) < Date.parse(getToday())){\n        //                 let numDays = (((Date.parse(goal.lastDayUpdated) - Date.parse(getToday()))/ 8.64e+7) * -1)\n        //                 updatedDailyGoals.push(this.updateLastUpdated(goal, numDays))\n        //             }   \n        //         }\n        //     })\n        //     localState.goals.dailyGoals = updatedDailyGoals;\n        //     this.setState({\n        //         state: localState\n        //     })\n        // }\n        this.state.goals.dailyGoals.forEach(goal => {\n            if(Date.parse(goal.endDate) <= Date.parse(getYeseterday())){\n                localState.goals.completed.dailyGoals.push(this.changeDailyToCompleted(goal))\n            }\n            else{\n                if(Date.parse(goal.lastDayUpdated) < Date.parse(getToday())){\n                    let numDays = (((Date.parse(goal.lastDayUpdated) - Date.parse(getToday()))/ 8.64e+7) * -1)\n                    updatedDailyGoals.push(this.updateLastUpdated(goal, numDays))\n                }   \n            }\n        })\n        localState.goals.dailyGoals = updatedDailyGoals;\n        this.setState({\n            state: localState\n        })\n\n    }\n    updateLastUpdated = (goal, numDays) =>{\n        if(numDays > 5){\n            goal.lastDayUpdated = getToday()\n            goal.weeklyChecked = [false, false, false, false, false, false, false]\n        }\n        else{\n            goal.lastDayUpdated = getToday();\n            let weeklyChecked = [false, false, false, false, false, false, false]\n            for(let i = 0; i < (5 - numDays); i++){\n                weeklyChecked[i] = goal.weeklyChecked[i + numDays]\n            }\n            goal.weeklyChecked = weeklyChecked\n        }\n        return goal\n    }\n    changeDailyToCompleted(newGoal){\n        let endDate = new Date(newGoal.endDate);\n        let totalDays = Math.abs(new Date(newGoal.startDate) - endDate) / 8.64e+7;\n        newGoal = {\n            id: newGoal.id,\n            title: newGoal.title,\n            snippit: newGoal.snippit,\n            startDate: newGoal.startDate,\n            endDate: newGoal.endDate,\n            daysChecked: newGoal.daysChecked,\n            percentComplete: ((newGoal.daysChecked/totalDays * 100).toString().substr(0, 2))\n        }\n        // let newCategory = true // true of false if new category\n\n        // // checks for category and pushes to category if it finds it\n        // let index = this.mapFunc(this.state.goals.completed.otherGoalsCategories, 'category', category)\n        // if(index !== null){\n        //     state.goals.completed.otherGoalsCategories[index].otherGoals.push(newGoal)\n        //         newCategory = false;\n        // }\n\n        // //makes new category and pushes\n        // if(newCategory === true){\n        //     newGoal = {\n        //         category: category,\n        //         id: uuid.v4(),\n        //         otherGoals: [\n        //             newGoal\n        //         ]\n        //     }\n        // }\n        return newGoal\n    }\n    deleteGoal = (key, category) => {\n        let state = this.state;\n        let toCompletedGoal;\n        if(category === 'daily'){\n            let filteredArr = this.state.goals.dailyGoals;\n            let index = this.mapFunc(this.state.goals.dailyGoals, 'id', key)\n            toCompletedGoal = this.state.goals.dailyGoals[index]\n            filteredArr.splice(index, 1);\n            state.goals.dailyGoals = filteredArr\n        }\n        else{\n            //maps and finds category\n            this.state.goals.otherGoalsCategories.forEach((catagories, index) => {\n                if(catagories.category === category){\n                    // sets filtered Arr to goal then filters out the deleted goal\n                    let filteredArr = this.state.goals.otherGoalsCategories[index].otherGoals;\n                    // Finds and removes goal\n                    this.state.goals.otherGoalsCategories[index].otherGoals.forEach((goal, index) =>{\n                        if(goal.id === key){\n                            filteredArr.splice(index, 1);\n                            toCompletedGoal = goal;\n                        }\n                        return true;\n                    })\n                    // sets local state\n                    state.goals.otherGoalsCategories[index].otherGoals = filteredArr\n                    //checks if category is empty\n                    if((state.goals.otherGoalsCategories[index].otherGoals).length === 0){\n                        state.goals.otherGoalsCategories.splice(index, 1);\n                    }\n                }\n                return true;\n            })\n        }\n        this.setState({\n            [state]: state\n        })\n        this.completed(toCompletedGoal, category)\n        return;\n    }\n    updateRenderIfs = (whichClicked) => {\n        let otherStuffs = this.state.otherStuffs\n        if(this.state.otherStuffs[whichClicked] === false){\n            otherStuffs[whichClicked] = true;\n        }\n        // switch to determine sort goals stuff can probably simplify\n        switch(whichClicked){\n            case('allTypes'):\n                otherStuffs.renderDaily = true;\n                otherStuffs.renderOther = true;\n                break;\n            case('renderCurrent'):\n                if(this.state.otherStuffs.renderCompleted === true){\n                    otherStuffs.renderCompleted = false;\n                }\n                break;\n            case('renderCompleted'):\n                if(this.state.otherStuffs.renderCurrent === true){\n                    otherStuffs.renderCurrent = false;\n                }\n                break;\n            case('renderDaily'):\n                if(this.state.otherStuffs.renderOther === true){\n                    otherStuffs.renderOther = false;\n                }\n                break;\n            case('renderOther'):\n                if(this.state.otherStuffs.renderDaily === true){\n                    otherStuffs.renderDaily = false;\n                }\n                break;\n            default:\n                break;\n        }\n        this.setState({\n            otherStuffs: otherStuffs\n        })\n    }\n    completed = (newGoal, category) => {\n        let state = this.state\n        if(category === 'daily'){\n            let endDate = new Date(newGoal.endDate);\n            let totalDays = Math.abs(new Date(newGoal.startDate) - endDate) / 8.64e+7;\n            newGoal = {\n                id: newGoal.id,\n                title: newGoal.title,\n                snippit: newGoal.snippit,\n                startDate: newGoal.startDate,\n                endDate: newGoal.endDate,\n                daysChecked: newGoal.daysChecked,\n                percentComplete: ((newGoal.daysChecked/totalDays * 100).toString().substr(0, 2))\n            }\n            state.goals.completed.dailyGoals.push(newGoal);\n        }\n        else{\n            let newCategory = true; // true of false if new category\n\n            // checks for category and pushes to category if it finds it\n            let index = this.mapFunc(this.state.goals.completed.otherGoalsCategories, 'category', category)\n            if(index !== null){\n                state.goals.completed.otherGoalsCategories[index].otherGoals.push(newGoal)\n                    newCategory = false;\n            }\n\n            //makes new category and pushes\n            if(newCategory === true){\n                newGoal = {\n                    category: category,\n                    id: uuid.v4(),\n                    otherGoals: [\n                        newGoal\n                    ]\n                }\n                // push to local state\n                state.goals.completed.otherGoalsCategories.push(newGoal);\n            }\n        }\n        //push to state and close overlay\n        state.otherStuffs.overlayIsHidden = true;\n        this.setState({\n            state: state\n            })\n        return;\n    }\n    displayGoalOverlay = () => {\n        let state = this.state.otherStuffs\n        state.overlayIsHidden = !state.overlayIsHidden;\n        this.setState({\n            [state.otherStuffs]: state\n          })\n    }\n    updateCheckMark = (key) => {\n        let state = this.state.goals;\n        //finds index of item\n        let index = this.mapFunc(state.dailyGoals, 'id', key)\n        //updates index\n        state.dailyGoals[index].weeklyChecked[4] = !state.dailyGoals[index].weeklyChecked[4]\n        state.dailyGoals[index].weeklyChecked[4] ? state.dailyGoals[index].daysChecked++ : state.dailyGoals[index].daysChecked--\n        this.setState({\n            [state.goals]: state\n        })\n    }\n    stateAdd = (newGoal) => {\n        let state = this.state\n        let startDate = getToday()\n        // check if daily\n        if(newGoal.type === 'daily'){\n            newGoal = {\n                id: uuid.v4(),\n                title: newGoal.title,\n                snippit: newGoal.snippit,\n                startDate: startDate,\n                endDate: newGoal.endDate + \" 00:00\",\n                lastDayUpdated: startDate,\n                daysChecked: 0,\n                weeklyChecked: [false, false, false, false, false, false, false]\n            }\n            // push to local state\n            state.goals.dailyGoals.push(newGoal);\n        }\n        else{\n            let category = newGoal.category; // the new category\n            let newCategory = newGoal.newCategory; // true of false if new category\n            newGoal = {\n                id: uuid.v4(),\n                title: newGoal.title,\n                snippit: newGoal.snippit,\n                startDate: startDate,\n                endDate: newGoal.endDate + \" 00:00\",\n                percentComplete: 0\n            }\n            //check if new category\n            if(newCategory === true){\n                newGoal = {\n                    category: category,\n                    id: uuid.v4(),\n                    otherGoals: [\n                        newGoal\n                    ]\n                }\n                // push to local state\n                state.goals.otherGoalsCategories.push(newGoal);\n            }\n            else{\n                //finds category to add to\n                let index = this.mapFunc(this.state.goals.otherGoalsCategories, 'category', category)\n                state.goals.otherGoalsCategories[index].otherGoals.push(newGoal)\n            }\n        }\n        //push to state and close overlay\n        state.otherStuffs.overlayIsHidden = true;\n        this.setState({\n            state: state\n        })\n        return;\n    }\n    navSlideChange = ()=>{\n        const nav = document.querySelector('.sidenav');\n        nav.classList.toggle('nav-active');\n    }\n    updateDaily = () => {\n        let state = this.state;\n        let numDays = (((Date.parse(state.goals.dailyGoals[0].lastDayUpdated) - Date.parse(getToday()))/ 8.64e+7) * -1)\n        if(numDays > 5){\n            state.goals.dailyGoals.forEach(goal => {\n                goal.lastDayUpdated = getToday()\n                goal.weeklyChecked = [false, false, false, false, false, false, false]\n            })\n        }\n        else{\n            state.goals.dailyGoals.forEach(goal => {\n                goal.lastDayUpdated = getToday();\n                let weeklyChecked = [false, false, false, false, false, false, false]\n                for(let i = 0; i < (5 - numDays); i++){\n                    weeklyChecked[i] = goal.weeklyChecked[i + numDays]\n                }\n                goal.weeklyChecked = weeklyChecked\n            })\n        }\n        this.setState({\n            state: state\n        })\n        return;\n    }\n    addPercentage = (id, category) => {\n        let state = this.state;\n\n        let categoryIndex = this.mapFunc(this.state.goals.otherGoalsCategories, 'category', category)\n        let goalIndex = this.mapFunc(this.state.goals.otherGoalsCategories[categoryIndex].otherGoals, 'id', id)\n        state.goals.otherGoalsCategories[categoryIndex].otherGoals[goalIndex].percentComplete+= 2;\n\n        if(state.goals.otherGoalsCategories[categoryIndex].otherGoals[goalIndex].percentComplete > 99){\n            this.deleteGoal(id, category);\n        }\n        else{\n            this.setState({\n                state: state\n            })\n        }\n    }\n    subtractPercentage = (id, category) => {\n        let state = this.state;\n\n        let categoryIndex = this.mapFunc(this.state.goals.otherGoalsCategories, 'category', category)\n        let goalIndex = this.mapFunc(this.state.goals.otherGoalsCategories[categoryIndex].otherGoals, 'id', id)\n\n        if(state.goals.otherGoalsCategories[categoryIndex].otherGoals[goalIndex].percentComplete <= 0){\n            return;\n        }\n        else{\n            state.goals.otherGoalsCategories[categoryIndex].otherGoals[goalIndex].percentComplete+= -2;\n            this.setState({\n                state: state\n            })\n        }\n    }\n    mapFunc = (list, category, find) =>{\n        for(let i = 0; i < list.length; i++){\n            if(list[i][category] === find){\n                return i;\n            }\n        }\n        return null;\n    }\n    render() {\n        return (\n            <div>\n            <div className=\"sidenav\">\n                <div className=\"user\">\n                    <img src=\"Images/profile.png\" alt=\"\"/>\n                    <a href=\"http://localhost:3000\">Guest</a>\n                </div>\n                <div className=\"navlinks\">\n                    <a href= \"http://localhost:3000\" >Dashboard</a>\n                    <a href= \"http://localhost:3000\" >Goals</a>\n                    <a href= \"http://localhost:3000\" >Tasks</a>\n                    <a href=\"http://localhost:3000\" >Portfolio Home</a>\n                </div>\n            </div>\n            <div className=\"topnav\">\n                <div className = \"navdropdown\" onClick={this.navSlideChange}>\n                    <div className=\"line1\"></div>\n                    <div className=\"line2\"></div>\n                    <div className=\"line3\"></div>\n                </div>\n                <h1>Current Goals</h1>\n                <div className=\"creategoalbutton\">\n                        <button id=\"button\" onClick={this.displayGoalOverlay}>Create Goal</button>\n                </div>\n            </div>\n            <div className=\"main\">\n                <TypeSelector goals={this.state.goals} updateRenderIfs={this.updateRenderIfs}/>\n                <div className=\"goals\">\n                    <div className=\"dailygoals\">\n                        {this.state.otherStuffs.renderDaily && this.state.goals.dailyGoals.length !== 0 && this.state.otherStuffs.renderCurrent && <DailyGoalHeading/>}\n                        <div className=\"dailygoalslist\">\n                        {this.state.otherStuffs.renderDaily && this.state.goals.completed.dailyGoals.length !==  0 && this.state.otherStuffs.renderCompleted &&<CompletedDailyGoals dailyGoals={this.state.goals.completed.dailyGoals} />}\n                         {this.state.otherStuffs.renderDaily && this.state.otherStuffs.renderCurrent && this.state.goals.dailyGoals.length !== 0 &&<DailyGoals updateCheckMark={this.updateCheckMark} dailyGoals={this.state.goals.dailyGoals} deleteGoal={this.deleteGoal}/>}\n                        </div>\n                    </div>\n                    {this.state.otherStuffs.renderOther && this.state.otherStuffs.renderCurrent && this.state.goals.otherGoalsCategories.length !== 0 && <OtherGoals otherGoalCategories={this.state.goals.otherGoalsCategories} deleteGoal={this.deleteGoal}  addPercentage={this.addPercentage} subtractPercentage={this.subtractPercentage}/>}\n                    {this.state.otherStuffs.renderOther && this.state.goals.completed.otherGoalsCategories.length !== 0 && this.state.otherStuffs.renderCompleted && <CompletedOtherGoals otherGoalCategories={this.state.goals.completed.otherGoalsCategories}/>}\n                </div>\n                {!this.state.otherStuffs.overlayIsHidden && <Overlay otherGoalCategories={this.state.goals.otherGoalsCategories} closeGoalOverlay={this.displayGoalOverlay} stateAdd={this.stateAdd}/>}\n            </div>\n    </div>\n    );\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}