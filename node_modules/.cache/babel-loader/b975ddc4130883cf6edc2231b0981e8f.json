{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Killian\\\\Desktop\\\\Projects\\\\Goal-Tracker\\\\reactappthingy\\\\my-app\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport DailyGoalHeading from './DailyGoals/DailyGoalHeading';\nimport DailyGoals from './DailyGoals/DailyGoals';\nimport OtherGoals from './OtherGoals/OtherGoals';\nimport Overlay from './Overlay';\nimport TypeSelector from './TypeSelector';\nimport uuid from 'uuid';\nimport { getToday } from './commonCommands';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      goals: {\n        dailyGoals: [{\n          id: 1,\n          title: 'Programme',\n          snippit: 'Write Code',\n          startDate: '2019, 7, 1 00:00',\n          endDate: '2019, 7, 10 00:00',\n          daysChecked: 20,\n          weeklyChecked: [true, false, true, true, false, false, false]\n        }, {\n          id: 2,\n          title: 'Learn React',\n          snippit: 'Write Code',\n          startDate: '2019, 7, 1 00:00',\n          endDate: '2019, 7, 15 00:00',\n          daysChecked: 20,\n          weeklyChecked: [true, true, false, true, false, false, false]\n        }, {\n          id: 3,\n          title: 'Be Cool',\n          snippit: 'Yea',\n          startDate: '2019, 7, 1 00:00',\n          endDate: '2019, 7, 15 00:00',\n          daysChecked: 20,\n          weeklyChecked: [false, true, true, true, false, false, false]\n        }],\n        otherGoalsCategories: [{\n          category: 'Programming',\n          id: 1,\n          otherGoals: [{\n            id: 1,\n            title: 'Learn React',\n            snippit: 'Code a bunch of stuff',\n            startDate: '2019, 7, 1 00:00',\n            endDate: '2019, 7, 15 00:00',\n            percentComplete: 20\n          }, {\n            id: 2,\n            title: 'Learn to Code',\n            snippit: 'Learn React, C++, SQL, and more C#',\n            startDate: '2019, 5, 1 00:00',\n            endDate: '2019, 8, 16 00:00',\n            percentComplete: 40\n          }]\n        }, {\n          category: 'Reading',\n          id: 2,\n          otherGoals: [{\n            id: 1,\n            title: 'Read a book',\n            snippit: 'Read the blade itself',\n            startDate: '2019, 7, 8 00:00',\n            endDate: '2019, 7, 30 00:00',\n            percentComplete: 0\n          }, {\n            id: 2,\n            title: 'Read 20 books',\n            snippit: \"Should'nt be too hard he thought\",\n            startDate: '2019, 1, 1 00:00',\n            endDate: '2020, 1, 1 00:00',\n            percentComplete: 50\n          }]\n        }, {\n          category: 'Goal Tracker Project',\n          id: 3,\n          otherGoals: [{\n            id: 1,\n            title: 'Add Goal Adding',\n            snippit: 'Add Form and State Addition',\n            startDate: '2019, 7, 9 00:00',\n            endDate: '2019, 7, 11 00:00',\n            percentComplete: 0\n          }, {\n            id: 2,\n            title: 'Add Goal Deletion',\n            snippit: 'Add Form and State Deletion',\n            startDate: '2019, 7, 9 00:00',\n            endDate: '2019, 7, 11 00:00',\n            percentComplete: 0\n          }, {\n            id: 3,\n            title: 'Fix Small bugs',\n            snippit: 'SideNav Stuff',\n            startDate: '2019, 7, 9 00:00',\n            endDate: '2019, 7, 12 00:00',\n            percentComplete: 0\n          }, {\n            id: 4,\n            title: 'Add Sorting Box',\n            snippit: 'Should be easy after I learn add and delete stuff',\n            startDate: '2019, 7, 9 00:00',\n            endDate: '2019, 7, 12 00:00',\n            percentComplete: 0\n          }, {\n            id: 5,\n            title: 'Add Login and backend stuff',\n            snippit: 'This might be the hard part',\n            startDate: '2019, 7, 9 00:00',\n            endDate: '2019, 7, 19 00:00',\n            percentComplete: 0\n          }]\n        }],\n        completed: {\n          dailyGoals: [],\n          otherGoalsCategories: [{\n            category: 'Programming',\n            id: 1,\n            otherGoals: [{\n              id: 1,\n              title: 'Learn React',\n              snippit: 'Code a bunch of stuff',\n              startDate: '2019, 7, 1 00:00',\n              endDate: '2019, 7, 15 00:00',\n              percentComplete: 20\n            }]\n          }]\n        }\n      },\n      otherStuffs: {\n        overlayIsHidden: true,\n        renderCurrent: true,\n        renderCompleted: false,\n        renderDaily: false,\n        renderOther: true\n      }\n    };\n\n    this.deleteGoal = (key, category) => {\n      let state = this.state;\n      let toCompletedGoal;\n\n      if (category === 'daily') {\n        // sets filtered Arr to goal then filters out the deleted goal\n        let filteredArr = this.state.goals.dailyGoals;\n        this.state.goals.dailyGoals.map((goal, index) => {\n          if (goal.id === key) {\n            filteredArr.splice(index, 1);\n            toCompletedGoal = goal;\n          }\n\n          return true;\n        });\n        state.goals.dailyGoals = filteredArr;\n      } else {\n        //maps and finds category\n        this.state.goals.otherGoalsCategories.map((catagories, index) => {\n          if (catagories.category === category) {\n            // sets filtered Arr to goal then filters out the deleted goal\n            let filteredArr = this.state.goals.otherGoalsCategories[index].otherGoals; // Finds and removes goal\n\n            this.state.goals.otherGoalsCategories[index].otherGoals.map((goal, index) => {\n              if (goal.id === key) {\n                filteredArr.splice(index, 1);\n                toCompletedGoal = goal;\n              }\n\n              return true;\n            }); // sets local state\n\n            state.goals.otherGoalsCategories[index].otherGoals = filteredArr; //checks if category is empty\n\n            if (state.goals.otherGoalsCategories[index].otherGoals.length === 0) {\n              state.goals.otherGoalsCategories.splice(index, 1);\n            }\n          }\n\n          return true;\n        });\n      }\n\n      this.setState({\n        [state]: state\n      });\n      this.completed(toCompletedGoal, category);\n      return;\n    };\n\n    this.updateRenderIfs = whichClicked => {\n      let otherStuffs = this.state.otherStuffs;\n      console.log(whichClicked);\n\n      if (this.state.otherStuffs[whichClicked] === false) {\n        otherStuffs[whichClicked] = true;\n      }\n\n      switch (whichClicked) {\n        case 'renderCurrent':\n          console.log('WTF1');\n\n          if (this.state.otherStuffs.renderCompleted === true) {\n            otherStuffs.renderCompleted = false;\n          }\n\n        case 'renderCompleted':\n          if (this.state.otherStuffs.renderCurrent === true) {\n            otherStuffs.renderCurrent = false;\n          }\n\n        case 'renderDaily':\n          if (this.state.otherStuffs.renderOther === true) {\n            otherStuffs.renderOther = false;\n          }\n\n        case 'renderOther':\n          console.log('WTF');\n\n          if (this.state.otherStuffs.renderDaily === true) {\n            otherStuffs.renderDaily = false;\n          }\n\n      } // console.log(otherStuffs)\n\n\n      this.setState({\n        otherStuffs: otherStuffs\n      });\n    };\n\n    this.completed = (newGoal, category) => {\n      let state = this.state; // check if daily\n\n      if (category === 'daily') {\n        state.goals.completed.dailyGoals.push(newGoal);\n      } else {\n        let newCategory = true; // true of false if new category\n\n        this.state.goals.completed.otherGoalsCategories.map((catagories, index) => {\n          if (catagories.category === category) {\n            state.goals.completed.otherGoalsCategories[index].otherGoals.push(newGoal);\n            newCategory = false;\n          }\n\n          return true;\n        }); //check if new category\n\n        if (newCategory === true) {\n          newGoal = {\n            category: category,\n            id: uuid.v4(),\n            otherGoals: [newGoal] // push to local state\n\n          };\n          state.goals.completed.otherGoalsCategories.push(newGoal);\n        }\n      } //push to state and close overlay\n\n\n      state.otherStuffs.overlayIsHidden = true;\n      this.setState({\n        state: state\n      });\n      return;\n    };\n\n    this.closeGoalOverlay = () => {\n      let state = this.state;\n      state.otherStuffs.overlayIsHidden = true;\n      this.setState({\n        state: state\n      });\n      return;\n    };\n\n    this.displayGoalOverlay = () => {\n      let state = this.state;\n      state.otherStuffs.overlayIsHidden = false;\n      this.setState({\n        state: state\n      });\n    };\n\n    this.stateAdd = newGoal => {\n      let state = this.state;\n      let startDate = getToday(); // check if daily\n\n      if (newGoal.type === 'daily') {\n        newGoal = {\n          id: uuid.v4(),\n          title: newGoal.title,\n          snippit: newGoal.snippit,\n          startDate: startDate,\n          endDate: newGoal.endDate + \" 00:00\",\n          daysChecked: 0,\n          weeklyChecked: [false, false, false, false, false, false, false] // push to local state\n\n        };\n        state.goals.dailyGoals.push(newGoal);\n      } else {\n        let category = newGoal.category; // the new category\n\n        let newCategory = newGoal.newCategory; // true of false if new category\n\n        newGoal = {\n          id: uuid.v4(),\n          title: newGoal.title,\n          snippit: newGoal.snippit,\n          startDate: startDate,\n          endDate: newGoal.endDate + \" 00:00\",\n          percentComplete: 0 //check if new category\n\n        };\n\n        if (newCategory === true) {\n          newGoal = {\n            category: category,\n            id: uuid.v4(),\n            otherGoals: [newGoal] // push to local state\n\n          };\n          state.goals.otherGoalsCategories.push(newGoal);\n        } else {\n          //finds category to add to\n          this.state.goals.otherGoalsCategories.map((catagories, index) => {\n            if (catagories.category === category) {\n              state.goals.otherGoalsCategories[index].otherGoals.push(newGoal);\n            }\n\n            return true;\n          });\n        }\n      } //push to state and close overlay\n\n\n      state.otherStuffs.overlayIsHidden = true;\n      this.setState({\n        state: state\n      });\n      return;\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"sidenav\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"user\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: \"Images/profile.png\",\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }), React.createElement(\"a\", {\n      href: \"http://localhost:3000\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }, \"Guest\")), React.createElement(\"div\", {\n      className: \"navlinks\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"http://localhost:3000\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }, \"Dashboard\"), React.createElement(\"a\", {\n      href: \"http://localhost:3000\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }, \"Goals\"), React.createElement(\"a\", {\n      href: \"http://localhost:3000\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, \"Tasks\"), React.createElement(\"a\", {\n      href: \"http://localhost:3000\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }, \"Portfolio Home\"))), React.createElement(\"div\", {\n      className: \"topnav\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"navdropdown\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"line1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"line2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"line3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    })), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }, \"Current Goals\"), React.createElement(\"div\", {\n      className: \"creategoalbutton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"button\",\n      onClick: this.displayGoalOverlay,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }, \"Create Goal\"))), React.createElement(\"div\", {\n      className: \"main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    }, React.createElement(TypeSelector, {\n      goals: this.state.goals,\n      updateRenderIfs: this.updateRenderIfs,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"goals\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"dailygoals\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }, this.state.otherStuffs.renderDaily && React.createElement(DailyGoalHeading, {\n      dailyGoals: this.state.goals.dailyGoals,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"dailygoalslist\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }, this.state.otherStuffs.renderDaily && React.createElement(DailyGoals, {\n      dailyGoals: this.state.goals.dailyGoals,\n      deleteGoal: this.deleteGoal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }))), this.state.otherStuffs.renderOther && React.createElement(OtherGoals, {\n      otherGoalCategories: this.state.goals.otherGoalsCategories,\n      deleteGoal: this.deleteGoal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    })), !this.state.otherStuffs.overlayIsHidden && React.createElement(Overlay, {\n      closeGoalOverlay: this.closeGoalOverlay,\n      otherGoalCategories: this.state.goals.otherGoalsCategories,\n      stateAdd: this.stateAdd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App; // const createGoalBtn = document.getElementById('button');\n// const goalCreatePopup = document.getElementById('creategoaloverlay');\n// const cancelBtn = document.getElementById('cancelbutton');\n// createGoalBtn.addEventListener('click', ()=>{\n//     goalCreatePopup.style.display = \"block\";\n// }, false)\n// cancelBtn.addEventListener('click', ()=>{\n//     goalCreatePopup.style.display = \"none\";\n// }, false)\n// const navSlide = () => {\n//     const navdropdown = document.querySelector('.navdropdown');\n//     const nav = document.querySelector('.sidenav');\n//     const navlinks = document.querySelectorAll('.navlinks a')\n//     navdropdown.addEventListener('click', ()=>{\n//         nav.classList.toggle('nav-active');\n//         navlinks.forEach((link, index)=>{\n//             if(link.style.animation){\n//                 link.style.animation = '';\n//             }\n//             else{\n//                 link.style.animation = `navLinkFade 0.5s ease forwards ${(index / 7) + .15}s`;\n//             }\n//         });\n//         navdropdown.classList.toggle('toggle');\n//     });\n// }\n// navSlide();","map":{"version":3,"sources":["C:\\Users\\Killian\\Desktop\\Projects\\Goal-Tracker\\reactappthingy\\my-app\\src\\App.js"],"names":["React","Component","DailyGoalHeading","DailyGoals","OtherGoals","Overlay","TypeSelector","uuid","getToday","App","state","goals","dailyGoals","id","title","snippit","startDate","endDate","daysChecked","weeklyChecked","otherGoalsCategories","category","otherGoals","percentComplete","completed","otherStuffs","overlayIsHidden","renderCurrent","renderCompleted","renderDaily","renderOther","deleteGoal","key","toCompletedGoal","filteredArr","map","goal","index","splice","catagories","length","setState","updateRenderIfs","whichClicked","console","log","newGoal","push","newCategory","v4","closeGoalOverlay","displayGoalOverlay","stateAdd","type","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport './App.css'\nimport DailyGoalHeading from './DailyGoals/DailyGoalHeading'\nimport DailyGoals from './DailyGoals/DailyGoals'\nimport OtherGoals from './OtherGoals/OtherGoals'\nimport Overlay from './Overlay'\nimport TypeSelector from './TypeSelector'\nimport uuid from 'uuid'\nimport {getToday} from './commonCommands'\n\nclass App extends Component {\n    state = {\n        goals:{\n            dailyGoals : [\n                {\n                    id: 1,\n                    title: 'Programme',\n                    snippit: 'Write Code',\n                    startDate: '2019, 7, 1 00:00',\n                    endDate: '2019, 7, 10 00:00',\n                    daysChecked: 20,\n                    weeklyChecked: [true, false, true, true, false, false, false]\n                },\n                {\n                    id: 2,\n                    title: 'Learn React',\n                    snippit: 'Write Code',\n                    startDate: '2019, 7, 1 00:00',\n                    endDate: '2019, 7, 15 00:00',\n                    daysChecked: 20,\n                    weeklyChecked: [true, true, false, true, false, false, false]\n                },\n                {\n                    id: 3,\n                    title: 'Be Cool',\n                    snippit: 'Yea',\n                    startDate: '2019, 7, 1 00:00',\n                    endDate: '2019, 7, 15 00:00',\n                    daysChecked: 20,\n                    weeklyChecked: [false, true, true, true, false, false, false]\n                }\n            ],\n            otherGoalsCategories:[\n                {\n                    category: 'Programming',\n                    id: 1,\n                    otherGoals:[\n                        {\n                            id: 1,\n                            title: 'Learn React',\n                            snippit: 'Code a bunch of stuff',\n                            startDate: '2019, 7, 1 00:00',\n                            endDate: '2019, 7, 15 00:00',\n                            percentComplete: 20\n                        },\n                        {\n                            id: 2,\n                            title: 'Learn to Code',\n                            snippit: 'Learn React, C++, SQL, and more C#',\n                            startDate: '2019, 5, 1 00:00',\n                            endDate: '2019, 8, 16 00:00',\n                            percentComplete: 40\n                        }\n                    ]\n                },\n                {\n                    category: 'Reading',\n                    id: 2,\n                    otherGoals:[\n                        {\n                            id: 1,\n                            title: 'Read a book',\n                            snippit: 'Read the blade itself',\n                            startDate: '2019, 7, 8 00:00',\n                            endDate: '2019, 7, 30 00:00',\n                            percentComplete: 0\n                        },\n                        {\n                            id: 2,\n                            title: 'Read 20 books',\n                            snippit: \"Should'nt be too hard he thought\",\n                            startDate: '2019, 1, 1 00:00',\n                            endDate: '2020, 1, 1 00:00',\n                            percentComplete: 50\n                        }\n                    ]\n                },\n                {\n                    category: 'Goal Tracker Project',\n                    id: 3,\n                    otherGoals:[\n                        {\n                            id: 1,\n                            title: 'Add Goal Adding',\n                            snippit: 'Add Form and State Addition',\n                            startDate: '2019, 7, 9 00:00',\n                            endDate: '2019, 7, 11 00:00',\n                            percentComplete: 0\n                        },\n                        {\n                            id: 2,\n                            title: 'Add Goal Deletion',\n                            snippit: 'Add Form and State Deletion',\n                            startDate: '2019, 7, 9 00:00',\n                            endDate: '2019, 7, 11 00:00',\n                            percentComplete: 0\n                        },\n                        {\n                            id: 3,\n                            title: 'Fix Small bugs',\n                            snippit: 'SideNav Stuff',\n                            startDate: '2019, 7, 9 00:00',\n                            endDate: '2019, 7, 12 00:00',\n                            percentComplete: 0\n                        },\n                        {\n                            id: 4,\n                            title: 'Add Sorting Box',\n                            snippit: 'Should be easy after I learn add and delete stuff',\n                            startDate: '2019, 7, 9 00:00',\n                            endDate: '2019, 7, 12 00:00',\n                            percentComplete: 0\n                        },\n                        {\n                            id: 5,\n                            title: 'Add Login and backend stuff',\n                            snippit: 'This might be the hard part',\n                            startDate: '2019, 7, 9 00:00',\n                            endDate: '2019, 7, 19 00:00',\n                            percentComplete: 0\n                        }\n                        \n                    ]\n                }\n            ],\n            completed : {\n                dailyGoals : [\n                ],\n                otherGoalsCategories : [\n                    {\n                        category: 'Programming',\n                        id: 1,\n                        otherGoals:[\n                            {\n                                id: 1,\n                                title: 'Learn React',\n                                snippit: 'Code a bunch of stuff',\n                                startDate: '2019, 7, 1 00:00',\n                                endDate: '2019, 7, 15 00:00',\n                                percentComplete: 20\n                            }\n                        ]\n                    }\n                ]\n            }\n        },\n        otherStuffs:{\n            overlayIsHidden: true,\n            renderCurrent: true,\n            renderCompleted: false,\n            renderDaily: false,\n            renderOther: true,\n        }\n    }\n    \n    deleteGoal = (key, category) => {\n        let state = this.state;\n        let toCompletedGoal;\n        if(category === 'daily'){\n            // sets filtered Arr to goal then filters out the deleted goal\n            let filteredArr = this.state.goals.dailyGoals;\n            this.state.goals.dailyGoals.map((goal, index) =>{\n                if(goal.id === key){ \n                    filteredArr.splice(index, 1); \n                    toCompletedGoal = goal;\n                }\n                return true;\n            })\n            state.goals.dailyGoals = filteredArr\n        }\n        else{\n            //maps and finds category\n            this.state.goals.otherGoalsCategories.map((catagories, index) => {\n                if(catagories.category === category){\n                    // sets filtered Arr to goal then filters out the deleted goal\n                    let filteredArr = this.state.goals.otherGoalsCategories[index].otherGoals;\n                    // Finds and removes goal\n                    this.state.goals.otherGoalsCategories[index].otherGoals.map((goal, index) =>{\n                        if(goal.id === key){ \n                            filteredArr.splice(index, 1); \n                            toCompletedGoal = goal;\n                        }\n                        return true;\n                    })\n                    // sets local state\n                    state.goals.otherGoalsCategories[index].otherGoals = filteredArr\n                    //checks if category is empty\n                    if((state.goals.otherGoalsCategories[index].otherGoals).length === 0){\n                        state.goals.otherGoalsCategories.splice(index, 1);\n                    }\n                }\n                return true;\n            })\n        }\n        this.setState({\n            [state]: state\n        })\n        this.completed(toCompletedGoal, category)\n        return;\n    }\n    updateRenderIfs = (whichClicked) => {\n        let otherStuffs = this.state.otherStuffs\n        console.log(whichClicked)\n        if(this.state.otherStuffs[whichClicked] === false){\n            otherStuffs[whichClicked] = true;\n        }\n        switch(whichClicked){\n            case('renderCurrent'):\n            console.log('WTF1')\n                if(this.state.otherStuffs.renderCompleted === true){\n                    otherStuffs.renderCompleted = false;\n                }\n            case('renderCompleted'):\n                if(this.state.otherStuffs.renderCurrent === true){\n                    otherStuffs.renderCurrent = false;\n                }\n            case('renderDaily'):\n                if(this.state.otherStuffs.renderOther === true){\n                    otherStuffs.renderOther = false;\n                }\n            case('renderOther'):\n            console.log('WTF')\n                if(this.state.otherStuffs.renderDaily === true){\n                    otherStuffs.renderDaily = false;\n                }\n        }\n        // console.log(otherStuffs)\n        this.setState({\n            otherStuffs: otherStuffs\n        })\n    }\n    completed = (newGoal, category) => {\n        let state = this.state\n        // check if daily\n        if(category === 'daily'){\n            state.goals.completed.dailyGoals.push(newGoal);\n        }\n        else{\n            let newCategory = true; // true of false if new category\n    \n            this.state.goals.completed.otherGoalsCategories.map((catagories, index) => {\n                if(catagories.category === category){\n                    state.goals.completed.otherGoalsCategories[index].otherGoals.push(newGoal)\n                    newCategory = false;\n                }\n                return true;\n            })\n            //check if new category\n            if(newCategory === true){\n                newGoal = {\n                    category: category,\n                    id: uuid.v4(),\n                    otherGoals: [\n                        newGoal\n                    ]\n                }\n                // push to local state\n                state.goals.completed.otherGoalsCategories.push(newGoal);\n            }\n        }\n        //push to state and close overlay\n        state.otherStuffs.overlayIsHidden = true;\n        this.setState({\n            state: state\n            })\n        return;\n    }\n    closeGoalOverlay = () => {\n        let state = this.state\n        state.otherStuffs.overlayIsHidden = true;\n        this.setState({\n            state: state\n          })\n        return;\n    }\n    displayGoalOverlay = () => {\n        let state = this.state\n        state.otherStuffs.overlayIsHidden = false;\n        this.setState({\n            state: state\n          })\n    }\n    stateAdd = (newGoal) => {\n        let state = this.state\n        let startDate = getToday()\n        // check if daily\n        if(newGoal.type === 'daily'){\n            newGoal = {\n                id: uuid.v4(),\n                title: newGoal.title,\n                snippit: newGoal.snippit,\n                startDate: startDate,\n                endDate: newGoal.endDate + \" 00:00\",\n                daysChecked: 0,\n                weeklyChecked: [false, false, false, false, false, false, false]\n            }\n            // push to local state\n            state.goals.dailyGoals.push(newGoal);\n        }\n        else{\n            let category = newGoal.category; // the new category\n            let newCategory = newGoal.newCategory; // true of false if new category\n            newGoal = {\n                id: uuid.v4(),\n                title: newGoal.title,\n                snippit: newGoal.snippit,\n                startDate: startDate,\n                endDate: newGoal.endDate + \" 00:00\",\n                percentComplete: 0\n            }\n            //check if new category\n            if(newCategory === true){\n                newGoal = {\n                    category: category,\n                    id: uuid.v4(),\n                    otherGoals: [\n                        newGoal\n                    ]\n                }\n                // push to local state\n                state.goals.otherGoalsCategories.push(newGoal);\n            }\n            else{\n                //finds category to add to\n                this.state.goals.otherGoalsCategories.map((catagories, index) => {\n                    if(catagories.category === category){\n                        state.goals.otherGoalsCategories[index].otherGoals.push(newGoal)\n                    }\n                    return true;\n                })\n            }\n        }\n        //push to state and close overlay\n        state.otherStuffs.overlayIsHidden = true;\n        this.setState({\n            state: state\n        })\n        return;\n    }\n    render() {\n        return (\n            <div>\n            <div className=\"sidenav\">\n                <div className=\"user\">\n                    <img src=\"Images/profile.png\" alt=\"\"/>\n                    <a href=\"http://localhost:3000\">Guest</a>\n                </div>\n                <div className=\"navlinks\">\n                    <a href= \"http://localhost:3000\" >Dashboard</a>\n                    <a href= \"http://localhost:3000\" >Goals</a>\n                    <a href= \"http://localhost:3000\" >Tasks</a>\n                    <a href=\"http://localhost:3000\" >Portfolio Home</a>\n                </div>\n            </div>\n            <div className=\"topnav\">\n                <div className = \"navdropdown\">\n                    <div className=\"line1\"></div>\n                    <div className=\"line2\"></div>\n                    <div className=\"line3\"></div>\n                </div>\n                <h1>Current Goals</h1>\n                <div className=\"creategoalbutton\">\n                        <button id=\"button\" onClick={this.displayGoalOverlay}>Create Goal</button>\n                </div>\n            </div>\n            <div className=\"main\">\n\n                <TypeSelector goals={this.state.goals} updateRenderIfs={this.updateRenderIfs}/>\n                <div className=\"goals\">\n                    <div className=\"dailygoals\"> \n                        {this.state.otherStuffs.renderDaily && <DailyGoalHeading dailyGoals={this.state.goals.dailyGoals}/>}  \n                        <div className=\"dailygoalslist\">\n                         {this.state.otherStuffs.renderDaily && <DailyGoals dailyGoals={this.state.goals.dailyGoals} deleteGoal={this.deleteGoal} />} \n                        </div>\n                    </div>\n                    {this.state.otherStuffs.renderOther && <OtherGoals otherGoalCategories={this.state.goals.otherGoalsCategories} deleteGoal={this.deleteGoal} />}\n                </div>\n                {!this.state.otherStuffs.overlayIsHidden && <Overlay closeGoalOverlay={this.closeGoalOverlay} otherGoalCategories={this.state.goals.otherGoalsCategories} stateAdd={this.stateAdd} />}   \n            </div>\n    </div>\n    );\n    }\n}\n\nexport default App;\n\n// const createGoalBtn = document.getElementById('button');\n// const goalCreatePopup = document.getElementById('creategoaloverlay');\n// const cancelBtn = document.getElementById('cancelbutton');\n\n// createGoalBtn.addEventListener('click', ()=>{\n//     goalCreatePopup.style.display = \"block\";\n// }, false)\n\n// cancelBtn.addEventListener('click', ()=>{\n//     goalCreatePopup.style.display = \"none\";\n// }, false)\n\n// const navSlide = () => {\n//     const navdropdown = document.querySelector('.navdropdown');\n//     const nav = document.querySelector('.sidenav');\n//     const navlinks = document.querySelectorAll('.navlinks a')\n\n//     navdropdown.addEventListener('click', ()=>{\n//         nav.classList.toggle('nav-active');\n//         navlinks.forEach((link, index)=>{\n//             if(link.style.animation){\n//                 link.style.animation = '';\n//             }\n//             else{\n//                 link.style.animation = `navLinkFade 0.5s ease forwards ${(index / 7) + .15}s`;\n//             }\n//         });\n\n//         navdropdown.classList.toggle('toggle');\n//     });\n// }\n// navSlide();"]},"metadata":{},"sourceType":"module"}