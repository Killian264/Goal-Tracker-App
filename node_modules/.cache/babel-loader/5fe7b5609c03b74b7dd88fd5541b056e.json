{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Killian\\\\Desktop\\\\Projects\\\\Goal-Tracker\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport DailyGoalHeading from './DailyGoals/DailyGoalHeading';\nimport DailyGoals from './DailyGoals/DailyGoals';\nimport OtherGoals from './OtherGoals/OtherGoals';\nimport TypeSelector from './TypeSelector';\nimport uuid from 'uuid';\nimport Overlay from './Overlay';\nimport { getToday, getYeseterday } from './commonCommands';\nimport CompletedDailyGoals from './CompletedGoals/DailyGoals/DailyGoals';\nimport CompletedOtherGoals from './CompletedGoals/OtherGoals/OtherGoals';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      goals: {\n        dailyGoals: [{\n          id: 1,\n          title: 'Programme',\n          snippit: 'Write Code',\n          startDate: '2019, 7, 1 00:00',\n          endDate: '2019, 7, 30 00:00',\n          lastDayUpdated: '2019, 7, 14 00:00',\n          daysChecked: 20,\n          weeklyChecked: [true, false, true, true, true, false, false]\n        }, {\n          id: 2,\n          title: 'Learn React',\n          snippit: 'Write Code',\n          startDate: '2019, 7, 1 00:00',\n          endDate: '2019, 7, 30 00:00',\n          lastDayUpdated: '2019, 7, 14 00:00',\n          daysChecked: 12,\n          weeklyChecked: [true, true, false, true, false, false, false]\n        }, {\n          id: 3,\n          title: 'Be Cool',\n          snippit: 'Yea',\n          startDate: '2019, 7, 1 00:00',\n          endDate: '2019, 7, 10 00:00',\n          lastDayUpdated: '2019, 7, 14 00:00',\n          daysChecked: 12,\n          weeklyChecked: [false, true, true, true, false, false, false]\n        }, {\n          id: 5454,\n          title: 'Be Cools',\n          snippit: 'Yea',\n          startDate: '2019, 7, 1 00:00',\n          endDate: '2019, 7, 17 00:00',\n          lastDayUpdated: '2019, 7, 14 00:00',\n          daysChecked: 12,\n          weeklyChecked: [false, true, true, true, false, false, false]\n        }],\n        otherGoalsCategories: [{\n          category: 'Programming',\n          id: 4,\n          otherGoals: [{\n            id: 5,\n            title: 'Learn React',\n            snippit: 'Code a bunch of stuff',\n            startDate: '2019, 7, 1 00:00',\n            endDate: '2019, 7, 15 00:00',\n            percentComplete: 20\n          }, {\n            id: 6,\n            title: 'Learn to Code',\n            snippit: 'Learn React, C++, SQL, and more C#',\n            startDate: '2019, 5, 1 00:00',\n            endDate: '2019, 8, 16 00:00',\n            percentComplete: 40\n          }]\n        }, {\n          category: 'Reading',\n          id: 7,\n          otherGoals: [{\n            id: 8,\n            title: 'Read a book',\n            snippit: 'Read the blade itself',\n            startDate: '2019, 7, 8 00:00',\n            endDate: '2019, 7, 30 00:00',\n            percentComplete: 0\n          }, {\n            id: 9,\n            title: 'Read 20 books',\n            snippit: \"Shouldn't be too hard he thought\",\n            startDate: '2019, 1, 1 00:00',\n            endDate: '2020, 1, 1 00:00',\n            percentComplete: 50\n          }]\n        }, {\n          category: 'Goal Tracker Project',\n          id: 10,\n          otherGoals: [{\n            id: 11,\n            title: 'Add Goal Adding',\n            snippit: 'Add Form and State Addition',\n            startDate: '2019, 7, 9 00:00',\n            endDate: '2019, 7, 11 00:00',\n            percentComplete: 0\n          }, {\n            id: 12,\n            title: 'Add Goal Deletion',\n            snippit: 'Add Form and State Deletion',\n            startDate: '2019, 7, 9 00:00',\n            endDate: '2019, 7, 11 00:00',\n            percentComplete: 0\n          }, {\n            id: 13,\n            title: 'Fix Small bugs',\n            snippit: 'SideNav Stuff',\n            startDate: '2019, 7, 9 00:00',\n            endDate: '2019, 7, 12 00:00',\n            percentComplete: 0\n          }, {\n            id: 14,\n            title: 'Add Sorting Box',\n            snippit: 'Should be easy after I learn add and delete stuff',\n            startDate: '2019, 7, 9 00:00',\n            endDate: '2019, 7, 12 00:00',\n            percentComplete: 0\n          }, {\n            id: 15,\n            title: 'Add Login and backend stuff',\n            snippit: 'This might be the hard part',\n            startDate: '2019, 7, 9 00:00',\n            endDate: '2019, 7, 19 00:00',\n            percentComplete: 0\n          }]\n        }],\n        completed: {\n          dailyGoals: [],\n          otherGoalsCategories: [{\n            category: 'Programming',\n            id: 16,\n            otherGoals: [{\n              id: 17,\n              title: 'Learn React',\n              snippit: 'Code a bunch of stuff',\n              startDate: '2019, 7, 1 00:00',\n              endDate: '2019, 7, 15 00:00',\n              percentComplete: 20\n            }]\n          }]\n        }\n      },\n      otherStuffs: {\n        overlayIsHidden: true,\n        renderCurrent: true,\n        renderCompleted: false,\n        renderDaily: true,\n        renderOther: true\n      }\n    };\n\n    this.pushOtherToCompleted = goal => {\n      let pushed = false;\n      this.state.goals.completed.otherGoalsCategories.forEach((completedCategory, index) => {\n        if (completedCategory.category === category.category) {\n          this.state.goals.completed.otherGoalsCategories[index].otherGoals.push(goal);\n          pushed = true;\n        }\n      });\n\n      if (pushed === false) {\n        this.state.complted.otherGoalCategories.push({\n          category: category.category,\n          id: category.id,\n          otherGoals: [goal]\n        });\n      }\n    };\n\n    this.updateLastUpdated = (goal, numDays) => {\n      if (numDays > 5) {\n        goal.lastDayUpdated = getToday();\n        goal.weeklyChecked = [false, false, false, false, false, false, false];\n      } else {\n        goal.lastDayUpdated = getToday();\n        let weeklyChecked = [false, false, false, false, false, false, false];\n\n        for (let i = 0; i < 5 - numDays; i++) {\n          weeklyChecked[i] = goal.weeklyChecked[i + numDays];\n        }\n\n        goal.weeklyChecked = weeklyChecked;\n      }\n\n      return goal;\n    };\n\n    this.deleteGoal = (key, category) => {\n      let state = this.state;\n      let toCompletedGoal;\n\n      if (category === 'daily') {\n        let filteredArr = this.state.goals.dailyGoals;\n        let index = this.mapFunc(this.state.goals.dailyGoals, 'id', key);\n        toCompletedGoal = this.state.goals.dailyGoals[index];\n        filteredArr.splice(index, 1);\n        state.goals.dailyGoals = filteredArr;\n      } else {\n        //maps and finds category\n        this.state.goals.otherGoalsCategories.forEach((catagories, index) => {\n          if (catagories.category === category) {\n            // sets filtered Arr to goal then filters out the deleted goal\n            let filteredArr = this.state.goals.otherGoalsCategories[index].otherGoals; // Finds and removes goal\n\n            this.state.goals.otherGoalsCategories[index].otherGoals.forEach((goal, index) => {\n              if (goal.id === key) {\n                filteredArr.splice(index, 1);\n                toCompletedGoal = goal;\n              }\n\n              return true;\n            }); // sets local state\n\n            state.goals.otherGoalsCategories[index].otherGoals = filteredArr; //checks if category is empty\n\n            if (state.goals.otherGoalsCategories[index].otherGoals.length === 0) {\n              state.goals.otherGoalsCategories.splice(index, 1);\n            }\n          }\n\n          return true;\n        });\n      }\n\n      this.setState({\n        [state]: state\n      });\n      this.completed(toCompletedGoal, category);\n      return;\n    };\n\n    this.updateRenderIfs = whichClicked => {\n      let otherStuffs = this.state.otherStuffs;\n\n      if (this.state.otherStuffs[whichClicked] === false) {\n        otherStuffs[whichClicked] = true;\n      } // switch to determine sort goals stuff can probably simplify\n\n\n      switch (whichClicked) {\n        case 'allTypes':\n          otherStuffs.renderDaily = true;\n          otherStuffs.renderOther = true;\n          break;\n\n        case 'renderCurrent':\n          if (this.state.otherStuffs.renderCompleted === true) {\n            otherStuffs.renderCompleted = false;\n          }\n\n          break;\n\n        case 'renderCompleted':\n          if (this.state.otherStuffs.renderCurrent === true) {\n            otherStuffs.renderCurrent = false;\n          }\n\n          break;\n\n        case 'renderDaily':\n          if (this.state.otherStuffs.renderOther === true) {\n            otherStuffs.renderOther = false;\n          }\n\n          break;\n\n        case 'renderOther':\n          if (this.state.otherStuffs.renderDaily === true) {\n            otherStuffs.renderDaily = false;\n          }\n\n          break;\n\n        default:\n          break;\n      }\n\n      this.setState({\n        otherStuffs: otherStuffs\n      });\n    };\n\n    this.completed = (newGoal, category) => {\n      let state = this.state;\n\n      if (category === 'daily') {\n        let endDate = new Date(newGoal.endDate);\n        let totalDays = Math.abs(new Date(newGoal.startDate) - endDate) / 8.64e+7;\n        newGoal = {\n          id: newGoal.id,\n          title: newGoal.title,\n          snippit: newGoal.snippit,\n          startDate: newGoal.startDate,\n          endDate: newGoal.endDate,\n          daysChecked: newGoal.daysChecked,\n          percentComplete: (newGoal.daysChecked / totalDays * 100).toString().substr(0, 2)\n        };\n        state.goals.completed.dailyGoals.push(newGoal);\n      } else {\n        let newCategory = true; // true of false if new category\n        // checks for category and pushes to category if it finds it\n\n        let index = this.mapFunc(this.state.goals.completed.otherGoalsCategories, 'category', category);\n\n        if (index !== null) {\n          state.goals.completed.otherGoalsCategories[index].otherGoals.push(newGoal);\n          newCategory = false;\n        } //makes new category and pushes\n\n\n        if (newCategory === true) {\n          newGoal = {\n            category: category,\n            id: uuid.v4(),\n            otherGoals: [newGoal] // push to local state\n\n          };\n          state.goals.completed.otherGoalsCategories.push(newGoal);\n        }\n      } //push to state and close overlay\n\n\n      state.otherStuffs.overlayIsHidden = true;\n      this.setState({\n        state: state\n      });\n      return;\n    };\n\n    this.displayGoalOverlay = () => {\n      let state = this.state.otherStuffs;\n      state.overlayIsHidden = !state.overlayIsHidden;\n      this.setState({\n        [state.otherStuffs]: state\n      });\n    };\n\n    this.updateCheckMark = key => {\n      let state = this.state.goals; //finds index of item\n\n      let index = this.mapFunc(state.dailyGoals, 'id', key); //updates index\n\n      state.dailyGoals[index].weeklyChecked[4] = !state.dailyGoals[index].weeklyChecked[4];\n      state.dailyGoals[index].weeklyChecked[4] ? state.dailyGoals[index].daysChecked++ : state.dailyGoals[index].daysChecked--;\n      this.setState({\n        [state.goals]: state\n      });\n    };\n\n    this.stateAdd = newGoal => {\n      let state = this.state;\n      let startDate = getToday(); // check if daily\n\n      if (newGoal.type === 'daily') {\n        newGoal = {\n          id: uuid.v4(),\n          title: newGoal.title,\n          snippit: newGoal.snippit,\n          startDate: startDate,\n          endDate: newGoal.endDate + \" 00:00\",\n          lastDayUpdated: startDate,\n          daysChecked: 0,\n          weeklyChecked: [false, false, false, false, false, false, false] // push to local state\n\n        };\n        state.goals.dailyGoals.push(newGoal);\n      } else {\n        let category = newGoal.category; // the new category\n\n        let newCategory = newGoal.newCategory; // true of false if new category\n\n        newGoal = {\n          id: uuid.v4(),\n          title: newGoal.title,\n          snippit: newGoal.snippit,\n          startDate: startDate,\n          endDate: newGoal.endDate + \" 00:00\",\n          percentComplete: 0 //check if new category\n\n        };\n\n        if (newCategory === true) {\n          newGoal = {\n            category: category,\n            id: uuid.v4(),\n            otherGoals: [newGoal] // push to local state\n\n          };\n          state.goals.otherGoalsCategories.push(newGoal);\n        } else {\n          //finds category to add to\n          let index = this.mapFunc(this.state.goals.otherGoalsCategories, 'category', category);\n          state.goals.otherGoalsCategories[index].otherGoals.push(newGoal);\n        }\n      } //push to state and close overlay\n\n\n      state.otherStuffs.overlayIsHidden = true;\n      this.setState({\n        state: state\n      });\n      return;\n    };\n\n    this.navSlideChange = () => {\n      const nav = document.querySelector('.sidenav');\n      nav.classList.toggle('nav-active');\n    };\n\n    this.addPercentage = (id, category) => {\n      let state = this.state;\n      let categoryIndex = this.mapFunc(this.state.goals.otherGoalsCategories, 'category', category);\n      let goalIndex = this.mapFunc(this.state.goals.otherGoalsCategories[categoryIndex].otherGoals, 'id', id);\n      state.goals.otherGoalsCategories[categoryIndex].otherGoals[goalIndex].percentComplete += 2;\n\n      if (state.goals.otherGoalsCategories[categoryIndex].otherGoals[goalIndex].percentComplete > 99) {\n        this.deleteGoal(id, category);\n      } else {\n        this.setState({\n          state: state\n        });\n      }\n    };\n\n    this.subtractPercentage = (id, category) => {\n      let state = this.state;\n      let categoryIndex = this.mapFunc(this.state.goals.otherGoalsCategories, 'category', category);\n      let goalIndex = this.mapFunc(this.state.goals.otherGoalsCategories[categoryIndex].otherGoals, 'id', id);\n\n      if (state.goals.otherGoalsCategories[categoryIndex].otherGoals[goalIndex].percentComplete <= 0) {\n        return;\n      } else {\n        state.goals.otherGoalsCategories[categoryIndex].otherGoals[goalIndex].percentComplete += -2;\n        this.setState({\n          state: state\n        });\n      }\n    };\n\n    this.mapFunc = (list, category, find) => {\n      for (let i = 0; i < list.length; i++) {\n        if (list[i][category] === find) {\n          return i;\n        }\n      }\n\n      return null;\n    };\n  }\n\n  componentDidMount() {\n    let localState = this.state;\n    let updatedDailyGoals = [];\n    this.state.goals.dailyGoals.forEach(goal => {\n      if (Date.parse(goal.endDate) <= Date.parse(getYeseterday())) {\n        localState.goals.completed.dailyGoals.push(this.changeDailyToCompleted(goal));\n      } else {\n        if (Date.parse(goal.lastDayUpdated) < Date.parse(getToday())) {\n          let numDays = (Date.parse(goal.lastDayUpdated) - Date.parse(getToday())) / 8.64e+7 * -1;\n          updatedDailyGoals.push(this.updateLastUpdated(goal, numDays));\n        }\n      }\n    }); // loop through categories\n\n    let updatedOtherCategories = [];\n    this.state.goals.otherGoalsCategories.forEach(category => {\n      //loop through goals\n      let updatedOtherGoals = [];\n      category.otherGoals.forEach(goal => {\n        if (Date.parse(goal.endDate) <= Date.parse(getYeseterday())) {\n          this.pushOtherToCompleted(goal);\n        } else {\n          updatedOtherGoals.push(goal);\n        }\n      });\n\n      if (updatedOtherGoals.length !== 0) {\n        let categoryRet = category;\n        categoryRet.otherGoals = updatedOtherGoals;\n        updatedOtherCategories.push(categoryRet);\n      }\n    });\n    localState.goals.dailyGoals = updatedDailyGoals;\n    this.setState({\n      state: localState\n    });\n  }\n\n  changeDailyToCompleted(newGoal) {\n    let endDate = new Date(newGoal.endDate);\n    let totalDays = Math.abs(new Date(newGoal.startDate) - endDate) / 8.64e+7;\n    newGoal = {\n      id: newGoal.id,\n      title: newGoal.title,\n      snippit: newGoal.snippit,\n      startDate: newGoal.startDate,\n      endDate: newGoal.endDate,\n      daysChecked: newGoal.daysChecked,\n      percentComplete: (newGoal.daysChecked / totalDays * 100).toString().substr(0, 2)\n    };\n    return newGoal;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"sidenav\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"user\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: \"Images/profile.png\",\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539\n      },\n      __self: this\n    }), React.createElement(\"a\", {\n      href: \"http://localhost:3000\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540\n      },\n      __self: this\n    }, \"Guest\")), React.createElement(\"div\", {\n      className: \"navlinks\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"http://localhost:3000\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543\n      },\n      __self: this\n    }, \"Dashboard\"), React.createElement(\"a\", {\n      href: \"http://localhost:3000\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544\n      },\n      __self: this\n    }, \"Goals\"), React.createElement(\"a\", {\n      href: \"http://localhost:3000\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545\n      },\n      __self: this\n    }, \"Tasks\"), React.createElement(\"a\", {\n      href: \"http://localhost:3000\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546\n      },\n      __self: this\n    }, \"Portfolio Home\"))), React.createElement(\"div\", {\n      className: \"topnav\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"navdropdown\",\n      onClick: this.navSlideChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"line1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"line2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"line3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553\n      },\n      __self: this\n    })), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555\n      },\n      __self: this\n    }, \"Current Goals\"), React.createElement(\"div\", {\n      className: \"creategoalbutton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"button\",\n      onClick: this.displayGoalOverlay,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557\n      },\n      __self: this\n    }, \"Create Goal\"))), React.createElement(\"div\", {\n      className: \"main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560\n      },\n      __self: this\n    }, React.createElement(TypeSelector, {\n      goals: this.state.goals,\n      updateRenderIfs: this.updateRenderIfs,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"goals\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"dailygoals\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563\n      },\n      __self: this\n    }, this.state.otherStuffs.renderDaily && this.state.goals.dailyGoals.length !== 0 && this.state.otherStuffs.renderCurrent && React.createElement(DailyGoalHeading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"dailygoalslist\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565\n      },\n      __self: this\n    }, this.state.otherStuffs.renderDaily && this.state.goals.completed.dailyGoals.length !== 0 && this.state.otherStuffs.renderCompleted && React.createElement(CompletedDailyGoals, {\n      dailyGoals: this.state.goals.completed.dailyGoals,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566\n      },\n      __self: this\n    }), this.state.otherStuffs.renderDaily && this.state.otherStuffs.renderCurrent && this.state.goals.dailyGoals.length !== 0 && React.createElement(DailyGoals, {\n      updateCheckMark: this.updateCheckMark,\n      dailyGoals: this.state.goals.dailyGoals,\n      deleteGoal: this.deleteGoal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567\n      },\n      __self: this\n    }))), this.state.otherStuffs.renderOther && this.state.otherStuffs.renderCurrent && this.state.goals.otherGoalsCategories.length !== 0 && React.createElement(OtherGoals, {\n      otherGoalCategories: this.state.goals.otherGoalsCategories,\n      deleteGoal: this.deleteGoal,\n      addPercentage: this.addPercentage,\n      subtractPercentage: this.subtractPercentage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570\n      },\n      __self: this\n    }), this.state.otherStuffs.renderOther && this.state.goals.completed.otherGoalsCategories.length !== 0 && this.state.otherStuffs.renderCompleted && React.createElement(CompletedOtherGoals, {\n      otherGoalCategories: this.state.goals.completed.otherGoalsCategories,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571\n      },\n      __self: this\n    })), !this.state.otherStuffs.overlayIsHidden && React.createElement(Overlay, {\n      otherGoalCategories: this.state.goals.otherGoalsCategories,\n      closeGoalOverlay: this.displayGoalOverlay,\n      stateAdd: this.stateAdd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Killian\\Desktop\\Projects\\Goal-Tracker\\src\\App.js"],"names":["React","Component","DailyGoalHeading","DailyGoals","OtherGoals","TypeSelector","uuid","Overlay","getToday","getYeseterday","CompletedDailyGoals","CompletedOtherGoals","App","state","goals","dailyGoals","id","title","snippit","startDate","endDate","lastDayUpdated","daysChecked","weeklyChecked","otherGoalsCategories","category","otherGoals","percentComplete","completed","otherStuffs","overlayIsHidden","renderCurrent","renderCompleted","renderDaily","renderOther","pushOtherToCompleted","goal","pushed","forEach","completedCategory","index","push","complted","otherGoalCategories","updateLastUpdated","numDays","i","deleteGoal","key","toCompletedGoal","filteredArr","mapFunc","splice","catagories","length","setState","updateRenderIfs","whichClicked","newGoal","Date","totalDays","Math","abs","toString","substr","newCategory","v4","displayGoalOverlay","updateCheckMark","stateAdd","type","navSlideChange","nav","document","querySelector","classList","toggle","addPercentage","categoryIndex","goalIndex","subtractPercentage","list","find","componentDidMount","localState","updatedDailyGoals","parse","changeDailyToCompleted","updatedOtherCategories","updatedOtherGoals","categoryRet","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport './App.css'\nimport DailyGoalHeading from './DailyGoals/DailyGoalHeading'\nimport DailyGoals from './DailyGoals/DailyGoals'\nimport OtherGoals from './OtherGoals/OtherGoals'\nimport TypeSelector from './TypeSelector'\nimport uuid from 'uuid'\nimport Overlay from './Overlay'\nimport {getToday, getYeseterday} from './commonCommands'\nimport CompletedDailyGoals from './CompletedGoals/DailyGoals/DailyGoals'\nimport CompletedOtherGoals from './CompletedGoals/OtherGoals/OtherGoals'\n\nclass App extends Component {\n    state = {\n        goals:{\n            dailyGoals : [\n                {\n                    id: 1,\n                    title: 'Programme',\n                    snippit: 'Write Code',\n                    startDate: '2019, 7, 1 00:00',\n                    endDate: '2019, 7, 30 00:00',\n                    lastDayUpdated:'2019, 7, 14 00:00',\n                    daysChecked: 20,\n                    weeklyChecked: [true, false, true, true, true, false, false]\n                },\n                {\n                    id: 2,\n                    title: 'Learn React',\n                    snippit: 'Write Code',\n                    startDate: '2019, 7, 1 00:00',\n                    endDate: '2019, 7, 30 00:00',\n                    lastDayUpdated:'2019, 7, 14 00:00',\n                    daysChecked: 12,\n                    weeklyChecked: [true, true, false, true, false, false, false]\n                },\n                {\n                    id: 3,\n                    title: 'Be Cool',\n                    snippit: 'Yea',\n                    startDate: '2019, 7, 1 00:00',\n                    endDate: '2019, 7, 10 00:00',\n                    lastDayUpdated:'2019, 7, 14 00:00',\n                    daysChecked: 12,\n                    weeklyChecked: [false, true, true, true, false, false, false]\n                },\n                {\n                    id: 5454,\n                    title: 'Be Cools',\n                    snippit: 'Yea',\n                    startDate: '2019, 7, 1 00:00',\n                    endDate: '2019, 7, 17 00:00',\n                    lastDayUpdated:'2019, 7, 14 00:00',\n                    daysChecked: 12,\n                    weeklyChecked: [false, true, true, true, false, false, false]\n                }\n            ],\n            otherGoalsCategories:[\n                {\n                    category: 'Programming',\n                    id: 4,\n                    otherGoals:[\n                        {\n                            id: 5,\n                            title: 'Learn React',\n                            snippit: 'Code a bunch of stuff',\n                            startDate: '2019, 7, 1 00:00',\n                            endDate: '2019, 7, 15 00:00',\n                            percentComplete: 20\n                        },\n                        {\n                            id: 6,\n                            title: 'Learn to Code',\n                            snippit: 'Learn React, C++, SQL, and more C#',\n                            startDate: '2019, 5, 1 00:00',\n                            endDate: '2019, 8, 16 00:00',\n                            percentComplete: 40\n                        }\n                    ]\n                },\n                {\n                    category: 'Reading',\n                    id: 7,\n                    otherGoals:[\n                        {\n                            id: 8,\n                            title: 'Read a book',\n                            snippit: 'Read the blade itself',\n                            startDate: '2019, 7, 8 00:00',\n                            endDate: '2019, 7, 30 00:00',\n                            percentComplete: 0\n                        },\n                        {\n                            id: 9,\n                            title: 'Read 20 books',\n                            snippit: \"Shouldn't be too hard he thought\",\n                            startDate: '2019, 1, 1 00:00',\n                            endDate: '2020, 1, 1 00:00',\n                            percentComplete: 50\n                        }\n                    ]\n                },\n                {\n                    category: 'Goal Tracker Project',\n                    id: 10,\n                    otherGoals:[\n                        {\n                            id: 11,\n                            title: 'Add Goal Adding',\n                            snippit: 'Add Form and State Addition',\n                            startDate: '2019, 7, 9 00:00',\n                            endDate: '2019, 7, 11 00:00',\n                            percentComplete: 0\n                        },\n                        {\n                            id: 12,\n                            title: 'Add Goal Deletion',\n                            snippit: 'Add Form and State Deletion',\n                            startDate: '2019, 7, 9 00:00',\n                            endDate: '2019, 7, 11 00:00',\n                            percentComplete: 0\n                        },\n                        {\n                            id: 13,\n                            title: 'Fix Small bugs',\n                            snippit: 'SideNav Stuff',\n                            startDate: '2019, 7, 9 00:00',\n                            endDate: '2019, 7, 12 00:00',\n                            percentComplete: 0\n                        },\n                        {\n                            id: 14,\n                            title: 'Add Sorting Box',\n                            snippit: 'Should be easy after I learn add and delete stuff',\n                            startDate: '2019, 7, 9 00:00',\n                            endDate: '2019, 7, 12 00:00',\n                            percentComplete: 0\n                        },\n                        {\n                            id: 15,\n                            title: 'Add Login and backend stuff',\n                            snippit: 'This might be the hard part',\n                            startDate: '2019, 7, 9 00:00',\n                            endDate: '2019, 7, 19 00:00',\n                            percentComplete: 0\n                        }\n\n                    ]\n                }\n            ],\n            completed : {\n                dailyGoals : [\n                    \n                ],\n                otherGoalsCategories : [\n                    {\n                        category: 'Programming',\n                        id: 16,\n                        otherGoals:[\n                            {\n                                id: 17,\n                                title: 'Learn React',\n                                snippit: 'Code a bunch of stuff',\n                                startDate: '2019, 7, 1 00:00',\n                                endDate: '2019, 7, 15 00:00',\n                                percentComplete: 20\n                            }\n                        ]\n                    }\n                ]\n            }\n        },\n        otherStuffs:{\n            overlayIsHidden: true,\n            renderCurrent: true,\n            renderCompleted: false,\n            renderDaily: true,\n            renderOther: true,\n        }\n    }\n    componentDidMount(){\n        let localState = this.state\n        let updatedDailyGoals= [];\n        this.state.goals.dailyGoals.forEach(goal => {\n            if(Date.parse(goal.endDate) <= Date.parse(getYeseterday())){\n                localState.goals.completed.dailyGoals.push(this.changeDailyToCompleted(goal))\n            }\n            else{\n                if(Date.parse(goal.lastDayUpdated) < Date.parse(getToday())){\n                    let numDays = (((Date.parse(goal.lastDayUpdated) - Date.parse(getToday()))/ 8.64e+7) * -1)\n                    updatedDailyGoals.push(this.updateLastUpdated(goal, numDays))\n                }   \n            }\n        })\n        // loop through categories\n        let updatedOtherCategories = [];\n        this.state.goals.otherGoalsCategories.forEach(category => {\n            //loop through goals\n            let updatedOtherGoals= [];\n            category.otherGoals.forEach(goal => {\n                if(Date.parse(goal.endDate) <= Date.parse(getYeseterday())){\n                    this.pushOtherToCompleted(goal);\n                }\n                else{\n                    updatedOtherGoals.push(goal)\n                }\n            })\n\n            if(updatedOtherGoals.length !== 0){\n                let categoryRet = category;\n                categoryRet.otherGoals = updatedOtherGoals;\n                updatedOtherCategories.push(categoryRet)\n            }\n        })\n        localState.goals.dailyGoals = updatedDailyGoals;\n        this.setState({\n            state: localState\n        })\n\n    }\n    pushOtherToCompleted = (goal) =>{\n        let pushed = false;\n        this.state.goals.completed.otherGoalsCategories.forEach((completedCategory, index) => {\n            if(completedCategory.category === category.category){\n                this.state.goals.completed.otherGoalsCategories[index].otherGoals.push(goal);\n                pushed = true;\n            }\n        })\n        if(pushed === false){\n            this.state.complted.otherGoalCategories.push(\n                {\n                    category: category.category,\n                    id: category.id,\n                    otherGoals:[\n                        goal\n                    ]\n                }\n            )\n        }\n    }\n    updateLastUpdated = (goal, numDays) =>{\n        if(numDays > 5){\n            goal.lastDayUpdated = getToday()\n            goal.weeklyChecked = [false, false, false, false, false, false, false]\n        }\n        else{\n            goal.lastDayUpdated = getToday();\n            let weeklyChecked = [false, false, false, false, false, false, false]\n            for(let i = 0; i < (5 - numDays); i++){\n                weeklyChecked[i] = goal.weeklyChecked[i + numDays]\n            }\n            goal.weeklyChecked = weeklyChecked\n        }\n        return goal\n    }\n    changeDailyToCompleted(newGoal){\n        let endDate = new Date(newGoal.endDate);\n        let totalDays = Math.abs(new Date(newGoal.startDate) - endDate) / 8.64e+7;\n        newGoal = {\n            id: newGoal.id,\n            title: newGoal.title,\n            snippit: newGoal.snippit,\n            startDate: newGoal.startDate,\n            endDate: newGoal.endDate,\n            daysChecked: newGoal.daysChecked,\n            percentComplete: ((newGoal.daysChecked/totalDays * 100).toString().substr(0, 2))\n        }\n        return newGoal\n    }\n    deleteGoal = (key, category) => {\n        let state = this.state;\n        let toCompletedGoal;\n        if(category === 'daily'){\n            let filteredArr = this.state.goals.dailyGoals;\n            let index = this.mapFunc(this.state.goals.dailyGoals, 'id', key)\n            toCompletedGoal = this.state.goals.dailyGoals[index]\n            filteredArr.splice(index, 1);\n            state.goals.dailyGoals = filteredArr\n        }\n        else{\n            //maps and finds category\n            this.state.goals.otherGoalsCategories.forEach((catagories, index) => {\n                if(catagories.category === category){\n                    // sets filtered Arr to goal then filters out the deleted goal\n                    let filteredArr = this.state.goals.otherGoalsCategories[index].otherGoals;\n                    // Finds and removes goal\n                    this.state.goals.otherGoalsCategories[index].otherGoals.forEach((goal, index) =>{\n                        if(goal.id === key){\n                            filteredArr.splice(index, 1);\n                            toCompletedGoal = goal;\n                        }\n                        return true;\n                    })\n                    // sets local state\n                    state.goals.otherGoalsCategories[index].otherGoals = filteredArr\n                    //checks if category is empty\n                    if((state.goals.otherGoalsCategories[index].otherGoals).length === 0){\n                        state.goals.otherGoalsCategories.splice(index, 1);\n                    }\n                }\n                return true;\n            })\n        }\n        this.setState({\n            [state]: state\n        })\n        this.completed(toCompletedGoal, category)\n        return;\n    }\n    updateRenderIfs = (whichClicked) => {\n        let otherStuffs = this.state.otherStuffs\n        if(this.state.otherStuffs[whichClicked] === false){\n            otherStuffs[whichClicked] = true;\n        }\n        // switch to determine sort goals stuff can probably simplify\n        switch(whichClicked){\n            case('allTypes'):\n                otherStuffs.renderDaily = true;\n                otherStuffs.renderOther = true;\n                break;\n            case('renderCurrent'):\n                if(this.state.otherStuffs.renderCompleted === true){\n                    otherStuffs.renderCompleted = false;\n                }\n                break;\n            case('renderCompleted'):\n                if(this.state.otherStuffs.renderCurrent === true){\n                    otherStuffs.renderCurrent = false;\n                }\n                break;\n            case('renderDaily'):\n                if(this.state.otherStuffs.renderOther === true){\n                    otherStuffs.renderOther = false;\n                }\n                break;\n            case('renderOther'):\n                if(this.state.otherStuffs.renderDaily === true){\n                    otherStuffs.renderDaily = false;\n                }\n                break;\n            default:\n                break;\n        }\n        this.setState({\n            otherStuffs: otherStuffs\n        })\n    }\n    completed = (newGoal, category) => {\n        let state = this.state\n        if(category === 'daily'){\n            let endDate = new Date(newGoal.endDate);\n            let totalDays = Math.abs(new Date(newGoal.startDate) - endDate) / 8.64e+7;\n            newGoal = {\n                id: newGoal.id,\n                title: newGoal.title,\n                snippit: newGoal.snippit,\n                startDate: newGoal.startDate,\n                endDate: newGoal.endDate,\n                daysChecked: newGoal.daysChecked,\n                percentComplete: ((newGoal.daysChecked/totalDays * 100).toString().substr(0, 2))\n            }\n            state.goals.completed.dailyGoals.push(newGoal);\n        }\n        else{\n            let newCategory = true; // true of false if new category\n\n            // checks for category and pushes to category if it finds it\n            let index = this.mapFunc(this.state.goals.completed.otherGoalsCategories, 'category', category)\n            if(index !== null){\n                state.goals.completed.otherGoalsCategories[index].otherGoals.push(newGoal)\n                    newCategory = false;\n            }\n\n            //makes new category and pushes\n            if(newCategory === true){\n                newGoal = {\n                    category: category,\n                    id: uuid.v4(),\n                    otherGoals: [\n                        newGoal\n                    ]\n                }\n                // push to local state\n                state.goals.completed.otherGoalsCategories.push(newGoal);\n            }\n        }\n        //push to state and close overlay\n        state.otherStuffs.overlayIsHidden = true;\n        this.setState({\n            state: state\n            })\n        return;\n    }\n    displayGoalOverlay = () => {\n        let state = this.state.otherStuffs\n        state.overlayIsHidden = !state.overlayIsHidden;\n        this.setState({\n            [state.otherStuffs]: state\n          })\n    }\n    updateCheckMark = (key) => {\n        let state = this.state.goals;\n        //finds index of item\n        let index = this.mapFunc(state.dailyGoals, 'id', key)\n        //updates index\n        state.dailyGoals[index].weeklyChecked[4] = !state.dailyGoals[index].weeklyChecked[4]\n        state.dailyGoals[index].weeklyChecked[4] ? state.dailyGoals[index].daysChecked++ : state.dailyGoals[index].daysChecked--\n        this.setState({\n            [state.goals]: state\n        })\n    }\n    stateAdd = (newGoal) => {\n        let state = this.state\n        let startDate = getToday()\n        // check if daily\n        if(newGoal.type === 'daily'){\n            newGoal = {\n                id: uuid.v4(),\n                title: newGoal.title,\n                snippit: newGoal.snippit,\n                startDate: startDate,\n                endDate: newGoal.endDate + \" 00:00\",\n                lastDayUpdated: startDate,\n                daysChecked: 0,\n                weeklyChecked: [false, false, false, false, false, false, false]\n            }\n            // push to local state\n            state.goals.dailyGoals.push(newGoal);\n        }\n        else{\n            let category = newGoal.category; // the new category\n            let newCategory = newGoal.newCategory; // true of false if new category\n            newGoal = {\n                id: uuid.v4(),\n                title: newGoal.title,\n                snippit: newGoal.snippit,\n                startDate: startDate,\n                endDate: newGoal.endDate + \" 00:00\",\n                percentComplete: 0\n            }\n            //check if new category\n            if(newCategory === true){\n                newGoal = {\n                    category: category,\n                    id: uuid.v4(),\n                    otherGoals: [\n                        newGoal\n                    ]\n                }\n                // push to local state\n                state.goals.otherGoalsCategories.push(newGoal);\n            }\n            else{\n                //finds category to add to\n                let index = this.mapFunc(this.state.goals.otherGoalsCategories, 'category', category)\n                state.goals.otherGoalsCategories[index].otherGoals.push(newGoal)\n            }\n        }\n        //push to state and close overlay\n        state.otherStuffs.overlayIsHidden = true;\n        this.setState({\n            state: state\n        })\n        return;\n    }\n    navSlideChange = ()=>{\n        const nav = document.querySelector('.sidenav');\n        nav.classList.toggle('nav-active');\n    }\n    // updateDaily = () => {\n    //     let state = this.state;\n    //     let numDays = (((Date.parse(state.goals.dailyGoals[0].lastDayUpdated) - Date.parse(getToday()))/ 8.64e+7) * -1)\n    //     if(numDays > 5){\n    //         state.goals.dailyGoals.forEach(goal => {\n    //             goal.lastDayUpdated = getToday()\n    //             goal.weeklyChecked = [false, false, false, false, false, false, false]\n    //         })\n    //     }\n    //     else{\n    //         state.goals.dailyGoals.forEach(goal => {\n    //             goal.lastDayUpdated = getToday();\n    //             let weeklyChecked = [false, false, false, false, false, false, false]\n    //             for(let i = 0; i < (5 - numDays); i++){\n    //                 weeklyChecked[i] = goal.weeklyChecked[i + numDays]\n    //             }\n    //             goal.weeklyChecked = weeklyChecked\n    //         })\n    //     }\n    //     this.setState({\n    //         state: state\n    //     })\n    //     return;\n    // }\n    addPercentage = (id, category) => {\n        let state = this.state;\n\n        let categoryIndex = this.mapFunc(this.state.goals.otherGoalsCategories, 'category', category)\n        let goalIndex = this.mapFunc(this.state.goals.otherGoalsCategories[categoryIndex].otherGoals, 'id', id)\n        state.goals.otherGoalsCategories[categoryIndex].otherGoals[goalIndex].percentComplete+= 2;\n\n        if(state.goals.otherGoalsCategories[categoryIndex].otherGoals[goalIndex].percentComplete > 99){\n            this.deleteGoal(id, category);\n        }\n        else{\n            this.setState({\n                state: state\n            })\n        }\n    }\n    subtractPercentage = (id, category) => {\n        let state = this.state;\n\n        let categoryIndex = this.mapFunc(this.state.goals.otherGoalsCategories, 'category', category)\n        let goalIndex = this.mapFunc(this.state.goals.otherGoalsCategories[categoryIndex].otherGoals, 'id', id)\n\n        if(state.goals.otherGoalsCategories[categoryIndex].otherGoals[goalIndex].percentComplete <= 0){\n            return;\n        }\n        else{\n            state.goals.otherGoalsCategories[categoryIndex].otherGoals[goalIndex].percentComplete+= -2;\n            this.setState({\n                state: state\n            })\n        }\n    }\n    mapFunc = (list, category, find) =>{\n        for(let i = 0; i < list.length; i++){\n            if(list[i][category] === find){\n                return i;\n            }\n        }\n        return null;\n    }\n    render() {\n        return (\n            <div>\n            <div className=\"sidenav\">\n                <div className=\"user\">\n                    <img src=\"Images/profile.png\" alt=\"\"/>\n                    <a href=\"http://localhost:3000\">Guest</a>\n                </div>\n                <div className=\"navlinks\">\n                    <a href= \"http://localhost:3000\" >Dashboard</a>\n                    <a href= \"http://localhost:3000\" >Goals</a>\n                    <a href= \"http://localhost:3000\" >Tasks</a>\n                    <a href=\"http://localhost:3000\" >Portfolio Home</a>\n                </div>\n            </div>\n            <div className=\"topnav\">\n                <div className = \"navdropdown\" onClick={this.navSlideChange}>\n                    <div className=\"line1\"></div>\n                    <div className=\"line2\"></div>\n                    <div className=\"line3\"></div>\n                </div>\n                <h1>Current Goals</h1>\n                <div className=\"creategoalbutton\">\n                        <button id=\"button\" onClick={this.displayGoalOverlay}>Create Goal</button>\n                </div>\n            </div>\n            <div className=\"main\">\n                <TypeSelector goals={this.state.goals} updateRenderIfs={this.updateRenderIfs}/>\n                <div className=\"goals\">\n                    <div className=\"dailygoals\">\n                        {this.state.otherStuffs.renderDaily && this.state.goals.dailyGoals.length !== 0 && this.state.otherStuffs.renderCurrent && <DailyGoalHeading/>}\n                        <div className=\"dailygoalslist\">\n                        {this.state.otherStuffs.renderDaily && this.state.goals.completed.dailyGoals.length !==  0 && this.state.otherStuffs.renderCompleted &&<CompletedDailyGoals dailyGoals={this.state.goals.completed.dailyGoals} />}\n                         {this.state.otherStuffs.renderDaily && this.state.otherStuffs.renderCurrent && this.state.goals.dailyGoals.length !== 0 &&<DailyGoals updateCheckMark={this.updateCheckMark} dailyGoals={this.state.goals.dailyGoals} deleteGoal={this.deleteGoal}/>}\n                        </div>\n                    </div>\n                    {this.state.otherStuffs.renderOther && this.state.otherStuffs.renderCurrent && this.state.goals.otherGoalsCategories.length !== 0 && <OtherGoals otherGoalCategories={this.state.goals.otherGoalsCategories} deleteGoal={this.deleteGoal}  addPercentage={this.addPercentage} subtractPercentage={this.subtractPercentage}/>}\n                    {this.state.otherStuffs.renderOther && this.state.goals.completed.otherGoalsCategories.length !== 0 && this.state.otherStuffs.renderCompleted && <CompletedOtherGoals otherGoalCategories={this.state.goals.completed.otherGoalsCategories}/>}\n                </div>\n                {!this.state.otherStuffs.overlayIsHidden && <Overlay otherGoalCategories={this.state.goals.otherGoalsCategories} closeGoalOverlay={this.displayGoalOverlay} stateAdd={this.stateAdd}/>}\n            </div>\n    </div>\n    );\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}