{"version":3,"sources":["DailyGoals/DailyGoals.js","DailyGoals/DailyGoalHeading.js","commonCommands.js","OtherGoals/OtherGoalList.js","OtherGoals/OtherGoals.js","TypeSelector.js","Overlay.js","CompletedGoals/DailyGoals/DailyGoals.js","CompletedGoals/OtherGoals/OtherGoalList.js","CompletedGoals/OtherGoals/OtherGoals.js","App.js","serviceWorker.js","index.js"],"names":["DailyGoals","state","renderAmount","heading","React","createRef","updateState","len","Math","floor","_this","setState","listElement","goal","i","react_default","a","createElement","key","className","type","checked","weeklyChecked","readOnly","positivedateRenders","list","push","negativedateRenders","ceil","onClick","e","props","deleteGoal","target","title","updateCheckMark","id","this","current","offsetWidth","_this2","_this$props","dailyGoals","displayDailyGoals","map","ref","snippit","displayCheckBoxes","Component","DailyGoalHeading","getWeekDay","getMonthDay","offset","today","Date","getFullYear","getMonth","getDate","getDay","src_DailyGoals_DailyGoals","getToday","dateObj","toString","getYeseterday","OtherGoalsList","othergoals","displayOtherGoals","otherGoals","endDate","totalDays","abs","startDate","timeLeft","split","subtractPercentage","category","addPercentage","percentComplete","OtherGoals","otherGoalCategories","render","OtherGoalList","TypeSelector","dailyLength","otherLength","completedLength","renderSelector","goals","otherGoalsCategories","categories","length","updateCategoryRender","name","defaultChecked","Fragment","lengthTemp","forEach","catagories","catagory","completed","updateRenderIfs","getLengths","Overlay","newCategory","onChange","Object","defineProperty","value","categoryOnChange","_this$setState2","tF","onSubmit","preventDefault","window","alert","stateAdd","closeGoalOverlay","disabled","daysChecked","OtherGoals_OtherGoalList","App","lastDayUpdated","otherStuffs","overlayIsHidden","renderCurrent","renderCompleted","renderDaily","renderOther","localState","index","console","log","updateLastUpdated","numDays","toCompletedGoal","filteredArr","mapFunc","splice","whichClicked","newGoal","substr","uuid","v4","displayGoalOverlay","navSlideChange","document","querySelector","classList","toggle","categoryIndex","goalIndex","find","updatedDailyGoals","parse","changeDailyToCompleted","updatedOtherCategories","updatedOtherGoals","pushed","completedCategory","categoryRet","src","alt","href","src_TypeSelector","DailyGoals_DailyGoalHeading","CompletedGoals_DailyGoals_DailyGoals","src_OtherGoals_OtherGoals","CompletedGoals_OtherGoals_OtherGoals","src_Overlay","Boolean","location","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.416b910d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass DailyGoals extends Component {\r\n    state = {\r\n        renderAmount: 0\r\n    }\r\n    heading = React.createRef();\r\n    componentDidMount() {\r\n        let len = this.heading.current.offsetWidth\r\n        this.updateState(len);\r\n    }\r\n    updateState = (len)=> {\r\n        // size of header is 200px checkmark is 80 px\r\n        len = Math.floor((len - 200)/80)\r\n        if(len > 8){len = 8}\r\n        let state = this.state\r\n        state.renderAmount = len\r\n        this.setState({\r\n            state: state\r\n        })\r\n    }\r\n    listElement = (goal, i) =>{\r\n        return(\r\n            <li key={i}>\r\n                <label className=\"checkbox\">\r\n                    <input type=\"checkbox\" checked={goal.weeklyChecked[i]} readOnly={true}/>\r\n                    <span className=\"checkmark\"></span>\r\n                </label>\r\n            </li>\r\n        )\r\n    }\r\n    positivedateRenders = (goal, len) => {\r\n        let list =[\r\n        ];\r\n        for(let i = 1; i <= len; i++){\r\n            list.push(this.listElement(goal, (i + 4)))\r\n        }\r\n        return(\r\n            [list]\r\n        )\r\n    }\r\n    negativedateRenders = (goal, len) => {\r\n        let list =[\r\n        ];\r\n        if(this.state.renderAmount === 2){\r\n           return;\r\n        }\r\n        len = len/2\r\n        len < 2 ? len = Math.floor(len) : len = Math.ceil(len)\r\n        for(let i = (4-len); i <= 3; i++){\r\n            list.push(this.listElement(goal, (i)))\r\n        }\r\n        return(\r\n            [list]\r\n        )\r\n    }\r\n    onClick = (e) => {\r\n        this.props.deleteGoal(e.target.title, 'daily')\r\n    }\r\n    updateCheckMark = (e) => {\r\n        this.props.updateCheckMark(e.target.id)\r\n    }\r\n\r\n    render() {\r\n        const{dailyGoals, deleteGoal, updateCheckMark} = this.props;\r\n        const displayCheckBoxes = (goal) =>{\r\n            return(\r\n                <ul key={goal.id}>\r\n                    {this.negativedateRenders(goal, this.state.renderAmount )}\r\n                    <li key={4}>\r\n                        <label className=\"checkbox checkboxmain\">\r\n                            <input type=\"checkbox\" checked={goal.weeklyChecked[4]} readOnly={true} onClick={() => {updateCheckMark(goal.id)}} />\r\n                            <span className=\"checkmark\"></span>\r\n                        </label>\r\n                    </li>\r\n                    {this.positivedateRenders(goal, Math.floor((this.state.renderAmount/2)) - 2) }\r\n                    <li key={8} className=\"close-container\"onClick={() => {deleteGoal(goal.id, 'daily')}}>\r\n                        <div className=\"leftright\"></div>\r\n                        <div className=\"rightleft\"></div>\r\n                        <label className=\"close\">close</label>\r\n                    </li>\r\n                </ul>\r\n            )\r\n        }\r\n        const displayDailyGoals = dailyGoals.map(goal => {\r\n            return(\r\n                <div className=\"onedailygoal\" key={goal.id} ref={this.heading}>\r\n                    <div className=\"onedailygoalheading\" >\r\n                        <h4>{goal.title}</h4>{goal.snippit}\r\n                    </div>\r\n                    {displayCheckBoxes(goal)}\r\n                </div>\r\n            )\r\n        })\r\n\r\n        return (\r\n            <div className=\"onedailygoalcheckmark\">\r\n                { displayDailyGoals }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default DailyGoals\r\n","import React, { Component } from 'react'\r\nimport DailyGoals from './DailyGoals'\r\n\r\nclass DailyGoalHeading extends Component {\r\n    state = {\r\n        renderAmount: 0\r\n    }\r\n    heading = React.createRef();\r\n    componentDidMount() {\r\n      let len = this.heading.current.offsetWidth\r\n\r\n      this.updateState(len);\r\n    }\r\n    updateState = (len)=> {\r\n        // size of header is 200px checkmark is 80 px\r\n        len = Math.floor((len - 200)/80)\r\n        if(len > 8){len = 8}\r\n        let state = this.state\r\n        state.renderAmount = len\r\n        this.setState({\r\n            state: state\r\n        })\r\n    }\r\n    listElement = (i) =>{\r\n        return(\r\n            <li key={i}>{this.getWeekDay(i)}<br/>{this.getMonthDay(i)}</li>\r\n        )\r\n    }\r\n    positivedateRenders = (len) => {\r\n        let list =[\r\n        ];\r\n        for(let i = 1; i <= len; i++){\r\n            list.push(this.listElement(i))\r\n        }\r\n        return(\r\n            [list]\r\n        )\r\n    }\r\n    negativedateRenders = (len) => {\r\n        let list =[\r\n        ];\r\n        if(this.state.renderAmount === 2){\r\n            return;\r\n         }\r\n        len = len/2\r\n        len < 2 ? len = Math.floor(len) : len = Math.ceil(len)\r\n        for(let i = (4-len); i <= 3; i++){\r\n            list.push(this.listElement(i - 4))\r\n        }\r\n        return(\r\n            [list]\r\n        )\r\n    }\r\n    getWeekDay = (offset) => {\r\n        let weekdays = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]\r\n        let today = new Date();\r\n        return weekdays[new Date(today.getFullYear(), today.getMonth(),  today.getDate() + offset).getDay()]\r\n    }\r\n    getMonthDay = (offset) => {\r\n        let today = new Date();\r\n        today = new Date(today.getFullYear(), today.getMonth(),  today.getDate() + offset);\r\n        return today.getDate()\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"dailygoals\">\r\n                <div className=\"dailyheading\" ref={this.heading}>\r\n                    <div className=\"dailyheadingheading\">\r\n                        <h1>Daily Goals</h1>\r\n                    </div>\r\n                    <ul>\r\n                        {this.negativedateRenders(this.state.renderAmount)}\r\n                        <li className='dailyWeekdate'>{this.getWeekDay(0)}<br/>{this.getMonthDay(0)}</li>\r\n                        {this.positivedateRenders((this.state.renderAmount/2) -2)}\r\n                        <li>Del<br/>▼</li>\r\n                    </ul>\r\n                </div>\r\n                <div className=\"dailygoalslist\">\r\n                {<DailyGoals updateCheckMark={this.props.updateCheckMark} dailyGoals={this.props.dailyGoals} deleteGoal={this.props.deleteGoal}/>}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default DailyGoalHeading","export function getToday() {\r\n    let dateObj = new Date();\r\n    return(dateObj.getFullYear().toString() + '/' + (dateObj.getMonth() + 1).toString() + '/' + dateObj.getDate().toString() + \" 00:00\");\r\n}\r\nexport function getYeseterday() {\r\n    let dateObj = new Date();\r\n    return(dateObj.getFullYear().toString() + '/' + (dateObj.getMonth() + 1).toString() + '/' + (dateObj.getDate()- 1).toString() + \" 00:00\");\r\n}\r\n\r\nexport function isCompleted(endDate) {\r\n    return (getToday() > endDate ? true : false)\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport {getToday} from '../commonCommands'\r\n\r\nclass OtherGoalsList extends Component {\r\n    render() {\r\n        const{othergoals} = this.props;\r\n        const displayOtherGoals = othergoals.otherGoals.map(goal=> {\r\n            // Possibly rework this later to work after component did mount and make it run once only\r\n            let endDate = new Date(goal.endDate);\r\n            let totalDays = Math.abs(new Date(goal.startDate) - endDate) / 8.64e+7;\r\n            let today = getToday();\r\n            let timeLeft = (Math.abs(endDate - new Date(today)) / 8.64e+7).toString().split('.')[0];\r\n            return(\r\n                <div className=\"othergoalslist\" key={goal.id}>\r\n                    <div className=\"otherdailygoal\">\r\n                        <div className=\"otherdailygoalheading otherdailygoalheadingheading\">\r\n                            <ul><h4>{goal.title}</h4>{goal.snippit}</ul>\r\n                        </div>\r\n                        <div className=\"otherdailygoalheading extendeddailygoaltimeframe\">\r\n                            <h4>{totalDays} Total Days<br/>{timeLeft} Days Left</h4>\r\n                        </div>\r\n                        <div className=\"otherdailygoalheading extendeddailygoalyourprogress\">\r\n                            {/* <h1>-</h1>\r\n                            <h4>{goal.percentComplete}%</h4> */}\r\n                            <h1 onClick={() => {this.props.subtractPercentage(goal.id, othergoals.category)}}>−</h1>\r\n                            <h1 onClick={() => {this.props.addPercentage(goal.id, othergoals.category)}}>+</h1>\r\n                            <h4>{goal.percentComplete}%</h4>\r\n                            <div className=\"close-container\"onClick={() => {this.props.deleteGoal(goal.id, othergoals.category)}}>\r\n                                <div className=\"leftright\"></div>\r\n                                <div className=\"rightleft\"></div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n\r\n        return(\r\n        <div>\r\n            {displayOtherGoals}\r\n        </div>\r\n        )\r\n    }\r\n}\r\n// {goal.startDate.toString().slice(0,10).replace(/-/g,\"\")}<br/>{goal.endDate.toString().slice(0,10).replace(/-/g,\"\")}\r\nexport default OtherGoalsList","import React, { Component } from 'react';\r\nimport OtherGoalList from './OtherGoalList';\r\n\r\nclass OtherGoals extends Component {\r\n    render() {\r\n        const{otherGoalCategories, deleteGoal} = this.props;\r\n        const displayOtherGoals = otherGoalCategories.map(category => {\r\n\r\n            if(category.render === false) {return(null)}\r\n\r\n            return(\r\n                <div className=\"othergoals\" key={category.id}>\r\n                    <div className=\"otherheading\">\r\n                        <div className=\"otherheadingheading\">\r\n                            <h1>{category.category}</h1>\r\n                        </div>\r\n                        <div className=\"otherheadingheading otherheadingheadingtimeframe\">\r\n                            <h1>TimeFrame</h1>\r\n                        </div>\r\n                        <div className=\"otherheadingheading otherheadingheadingyourprogress\">\r\n                            <h1>Your Progress</h1>\r\n                        </div>\r\n                    </div>\r\n                    <OtherGoalList othergoals={category} deleteGoal={deleteGoal} addPercentage={this.props.addPercentage} subtractPercentage={this.props.subtractPercentage}/>\r\n                </div>\r\n            )\r\n        })\r\n\r\n        return(\r\n        <div>\r\n            {displayOtherGoals}\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default OtherGoals","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass TypeSelector extends Component {\r\n    state = {\r\n        dailyLength: 0,\r\n        otherLength: 0,\r\n        completedLength: 0\r\n    }\r\n    render() {\r\n        const getLengths = () =>{\r\n            let state = this.state;\r\n            let length = 0\r\n            let lengthTemp = 0\r\n            // daily\r\n            state.dailyLength = (this.props.goals.dailyGoals).length\r\n\r\n            // otherGoals\r\n            this.props.goals.otherGoalsCategories.forEach(catagories => {\r\n                lengthTemp = catagories.otherGoals.length\r\n                state[catagories.catagory] = lengthTemp\r\n                length += lengthTemp\r\n                lengthTemp = 0\r\n                return true\r\n            })\r\n            state.otherLength = length\r\n            length = 0\r\n            lengthTemp = 0\r\n\r\n            //completed\r\n            // daily\r\n            length = (this.props.goals.completed.dailyGoals).length\r\n\r\n            // otherGoals\r\n            this.props.goals.completed.otherGoalsCategories.forEach(catagories => {\r\n                lengthTemp = catagories.otherGoals.length\r\n                state[catagories.catagory] = lengthTemp\r\n                length += lengthTemp\r\n                lengthTemp = 0\r\n                return true\r\n            })\r\n            state.completedLength = length\r\n            return(\r\n                <div className=\"goaltypeselector\">\r\n                    <h2>Sort Goals</h2>\r\n                    <div className=\"sort\">\r\n                        <ul>\r\n                            <label className=\"radiobtn\">Current: {state.dailyLength + state.otherLength}\r\n                                <input type=\"radio\" onClick={() =>  this.props.updateRenderIfs('renderCurrent')} name='currentOrCompleted'defaultChecked />\r\n                                <span id='renderCurrent' className=\"radiocheckmark\"></span>\r\n                            </label>\r\n                            <label className=\"radiobtn\">Completed: {state.completedLength}\r\n                                <input type=\"radio\" onClick={() =>  this.props.updateRenderIfs('renderCompleted')} name='currentOrCompleted' />\r\n                                <span id='renderCompleted' className=\"radiocheckmark\"></span>\r\n                            </label>\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"goaltype\">\r\n                        <h3>Goal Type</h3>\r\n                        <ul>\r\n                            <label className=\"radiobtn\">All Types: {state.dailyLength + state.otherLength}\r\n                                <input type=\"radio\" onClick={() => this.props.updateRenderIfs('allTypes')} name=\"goaltype\" defaultChecked />\r\n                                <span id='allTypes' className=\"radiocheckmark\"></span>\r\n                            </label>\r\n                            <label className=\"radiobtn\">Daily Goals: {state.dailyLength}\r\n                                <input type=\"radio\" onClick={() => this.props.updateRenderIfs('renderDaily')} name=\"goaltype\" />\r\n                                <span className=\"radiocheckmark\"></span>\r\n                            </label>\r\n                            <label className=\"radiobtn\">Other Goals: {state.otherLength}\r\n                                <input type=\"radio\"  onClick={() => this.props.updateRenderIfs('renderOther')} name=\"goaltype\" />\r\n                                <span className=\"radiocheckmark\"></span>\r\n                            </label>\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"catagories\">\r\n                        <h3>Catagories</h3>\r\n                        <ul>\r\n                            {renderSelector}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        const renderSelector = this.props.goals.otherGoalsCategories.map(categories => {\r\n                return(\r\n                    <label key={categories.id}className=\"radiobtn\" id='renderDaily'>{categories.category}: {categories.otherGoals.length}\r\n                        <input type=\"checkbox\" onClick={() => this.props.updateCategoryRender(categories.id)} name=\"category\" defaultChecked />\r\n                        <span id='renderDaily' className=\"radiocheckmark\"></span>\r\n                    </label>\r\n                )\r\n            })\r\n        return (\r\n            <React.Fragment>\r\n                {getLengths()}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\nexport default TypeSelector","import React, { Component } from 'react'\r\nimport {getYeseterday} from './commonCommands'\r\n\r\nclass Overlay extends Component {\r\n    state = {\r\n        title: null,\r\n        snippit: null,\r\n        endDate: null,\r\n        type: 'daily',\r\n        category: '',\r\n        newCategory: true\r\n    }\r\n    onChange = (e) => {\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n    categoryOnChange = (e) =>{\r\n        let tF;\r\n        e.target.value === 'newCategory' ? tF = true : tF = false;\r\n        this.setState({\r\n            [e.target.id]: e.target.value,\r\n            newCategory: tF\r\n        })\r\n    }\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        if((this.state.title && this.state.endDate) && (!(this.state.newCategory) || !(this.state.category === 'newCategory')) ){\r\n            if(new Date(this.state.endDate) < new Date(getYeseterday())){\r\n                window.alert(\"Date must be today or later\")\r\n                return;\r\n            }\r\n            this.props.stateAdd(this.state);\r\n        }\r\n        else{\r\n            return(\r\n                window.alert(\"Please fill out all fields\")\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const{otherGoalCategories , closeGoalOverlay} = this.props;\r\n        const categories = otherGoalCategories.map(category => {\r\n            return(\r\n                <option key={category.key} value={category.category}> {category.category}</option>\r\n            )\r\n        })\r\n        return (\r\n            <div className=\"creategoaloverlay\" id=\"creategoaloverlay\">\r\n              <div className=\"creategoal\">\r\n                  <h1>Create Goal</h1>\r\n                  <div className=\"goalallinput\">\r\n                      <ul>\r\n                            <li >Goal:<br/><input className=\"goalinput goal\" id=\"title\" type=\"text\" name=\"goal\" onChange={this.onChange}/></li>\r\n                            <li >Short Description:<br/> <input className=\"goalinput sDes\" id=\"snippit\" type=\"text\" name=\"sDes\" onChange={this.onChange}/></li>\r\n                            <li >Ends:<br/> <input type=\"date\" className=\"goalinput dDate\" id=\"endDate\" name=\"dDate\" onChange={this.onChange}/></li>\r\n                            <li>Type:\r\n                            <select name=\"type\" id=\"type\" className=\"type\" onChange={this.onChange}>\r\n                                <option value=\"daily\"> Daily Goal</option>\r\n                                <option value=\"default\"> Default Goal</option>\r\n                            </select>\r\n                            </li>\r\n                            Category:\r\n                            <select name=\"type\" className=\"type\" id='category' onChange={this.categoryOnChange} disabled={this.state.type === 'daily'}>\r\n                                <option value=\"newCategory\"> New Category</option>\r\n                                {categories}\r\n                            </select>\r\n                            <li >New Category:<br/> <input className=\"goalinput category\" id=\"category\" type=\"text\" name=\"category\" onChange={this.onChange} disabled={this.state.type === 'daily' || !(this.state.newCategory)}/></li>\r\n                      </ul>\r\n                  </div>\r\n                    <div className=\"submitarea\">\r\n                        <input id=\"cancelbutton\" className=\"button\" type=\"submit\" value=\"Cancel\" onClick={closeGoalOverlay}/>\r\n                        <div className=\"submitbutton\">\r\n                            <input className=\"button submit\" type=\"submit\" value=\"Submit\" onClick={this.onSubmit}/>\r\n                        </div>\r\n                    </div>\r\n              </div>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Overlay","import React, { Component } from 'react';\r\n\r\nclass OtherGoalsList extends Component {\r\n    render() {\r\n        const{dailyGoals} = this.props;\r\n        const displayOtherGoals = dailyGoals.map(goal=> {\r\n            // Possibly rework this later to work after component did mount and make it run once only\r\n            let endDate = new Date(goal.endDate);\r\n            let totalDays = Math.abs(new Date(goal.startDate) - endDate) / 8.64e+7;\r\n            return(\r\n                <div className=\"othergoalslist\" key={goal.id}>\r\n                    <div className=\"otherdailygoal\">\r\n                        <div className=\"otherdailygoalheading otherdailygoalheadingheading\">\r\n                            <ul><h4>{goal.title}</h4>{goal.snippit}</ul>\r\n                        </div>\r\n                        <div className=\"otherdailygoalheading extendeddailygoaltimeframe\">\r\n                            <h4>{totalDays} Total Days<br/> Ended {goal.endDate.split('00:00')[0]}</h4>\r\n                        </div>\r\n                        <div className=\"otherdailygoalheading extendeddailygoalyourprogress\">\r\n                            <h4>{goal.percentComplete}%<br/> Completed {goal.daysChecked} Days</h4>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n        return(\r\n            <div className=\"othergoals\">\r\n                    <div className=\"otherheading\">\r\n                        <div className=\"otherheadingheading\">\r\n                            <h1>Daily</h1>\r\n                        </div>\r\n                        <div className=\"otherheadingheading otherheadingheadingtimeframe\">\r\n                            <h1>TimeFrame</h1>\r\n                        </div>\r\n                        <div className=\"otherheadingheading otherheadingheadingyourprogress\">\r\n                            <h1>Final Progress</h1>\r\n                        </div>\r\n                    </div>\r\n                    {displayOtherGoals}\r\n                </div>\r\n        )\r\n    }\r\n}\r\n// {goal.startDate.toString().slice(0,10).replace(/-/g,\"\")}<br/>{goal.endDate.toString().slice(0,10).replace(/-/g,\"\")}\r\nexport default OtherGoalsList","import React, { Component } from 'react';\r\n\r\nclass OtherGoalsList extends Component {\r\n    render() {\r\n        const{othergoals} = this.props;\r\n        const displayOtherGoals = othergoals.otherGoals.map(goal=> {\r\n            // Possibly rework this later to work after component did mount and make it run once only\r\n            let endDate = new Date(goal.endDate);\r\n            let totalDays = Math.abs(new Date(goal.startDate) - endDate) / 8.64e+7;\r\n            return(\r\n                <div className=\"othergoalslist\" key={goal.id}>\r\n                    <div className=\"otherdailygoal\">\r\n                        <div className=\"otherdailygoalheading otherdailygoalheadingheading\">\r\n                            <ul><h4>{goal.title}</h4>{goal.snippit}</ul>\r\n                        </div>\r\n                        <div className=\"otherdailygoalheading extendeddailygoaltimeframe\">\r\n                            <h4>{totalDays} Total Days<br/> Ended {goal.endDate.split('00:00')[0]}</h4>\r\n                        </div>\r\n                        <div className=\"otherdailygoalheading extendeddailygoalyourprogress\">\r\n                            <h4>{goal.percentComplete}%</h4>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n\r\n        return(\r\n        <div>\r\n            {displayOtherGoals}\r\n        </div>\r\n        )\r\n    }\r\n}\r\n// {goal.startDate.toString().slice(0,10).replace(/-/g,\"\")}<br/>{goal.endDate.toString().slice(0,10).replace(/-/g,\"\")}\r\nexport default OtherGoalsList","import React, { Component } from 'react';\r\nimport OtherGoalList from './OtherGoalList';\r\n\r\nclass OtherGoals extends Component {\r\n    render() {\r\n        const{otherGoalCategories} = this.props;\r\n        const displayOtherGoals = otherGoalCategories.map(category => {\r\n\r\n            return(\r\n                <div className=\"othergoals\" key={category.id}>\r\n                    <div className=\"otherheading\">\r\n                        <div className=\"otherheadingheading\">\r\n                            <h1>{category.category}</h1>\r\n                        </div>\r\n                        <div className=\"otherheadingheading otherheadingheadingtimeframe\">\r\n                            <h1>TimeFrame</h1>\r\n                        </div>\r\n                        <div className=\"otherheadingheading otherheadingheadingyourprogress\">\r\n                            <h1>Final Progress</h1>\r\n                        </div>\r\n                    </div>\r\n                    <OtherGoalList othergoals={category}/>\r\n                </div>\r\n            )\r\n        })\r\n\r\n        return(\r\n        <div>\r\n            {displayOtherGoals}\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default OtherGoals","import React, {Component} from 'react'\nimport './App.css'\nimport DailyGoalHeading from './DailyGoals/DailyGoalHeading'\nimport OtherGoals from './OtherGoals/OtherGoals'\nimport TypeSelector from './TypeSelector'\nimport uuid from 'uuid'\nimport Overlay from './Overlay'\nimport {getToday, getYeseterday} from './commonCommands'\nimport CompletedDailyGoals from './CompletedGoals/DailyGoals/DailyGoals'\nimport CompletedOtherGoals from './CompletedGoals/OtherGoals/OtherGoals'\n\nclass App extends Component {\n    state = {\n        goals:{\n            dailyGoals : [\n                {\n                    id: 1,\n                    title: 'Programme',\n                    snippit: 'Write Code',\n                    startDate: '2019, 7, 1 00:00',\n                    endDate: '2019, 7, 30 00:00',\n                    lastDayUpdated:'2019, 7, 14 00:00',\n                    daysChecked: 20,\n                    weeklyChecked: [true, false, true, true, true, false, false]\n                },\n                {\n                    id: 2,\n                    title: 'Learn React',\n                    snippit: 'Write Code',\n                    startDate: '2019, 7, 1 00:00',\n                    endDate: '2019, 7, 30 00:00',\n                    lastDayUpdated:'2019, 7, 14 00:00',\n                    daysChecked: 12,\n                    weeklyChecked: [true, true, false, true, false, false, false]\n                },\n                {\n                    id: 3,\n                    title: 'Be Cool',\n                    snippit: 'Yea',\n                    startDate: '2019, 7, 1 00:00',\n                    endDate: '2019, 7, 10 00:00',\n                    lastDayUpdated:'2019, 7, 14 00:00',\n                    daysChecked: 12,\n                    weeklyChecked: [false, true, true, true, false, false, false]\n                },\n                {\n                    id: 5454,\n                    title: 'Be Cools',\n                    snippit: 'Yea',\n                    startDate: '2019, 7, 1 00:00',\n                    endDate: '2019, 7, 17 00:00',\n                    lastDayUpdated:'2019, 7, 14 00:00',\n                    daysChecked: 12,\n                    weeklyChecked: [false, true, true, true, false, false, false]\n                }\n            ],\n            otherGoalsCategories:[\n                {\n                    category: 'Programming',\n                    id: 4,\n                    render: true,\n                    otherGoals:[\n                        {\n                            id: 5,\n                            title: 'Learn React',\n                            snippit: 'Code a bunch of stuff',\n                            startDate: '2019, 7, 1 00:00',\n                            endDate: '2019, 7, 15 00:00',\n                            percentComplete: 20\n                        },\n                        {\n                            id: 6,\n                            title: 'Learn to Code',\n                            snippit: 'Learn React, C++, SQL, and more C#',\n                            startDate: '2019, 5, 1 00:00',\n                            endDate: '2019, 8, 16 00:00',\n                            percentComplete: 40\n                        }\n                    ]\n                },\n                {\n                    category: 'Reading',\n                    id: 7,\n                    render: true,\n                    otherGoals:[\n                        {\n                            id: 8,\n                            title: 'Read a book',\n                            snippit: 'Read the blade itself',\n                            startDate: '2019, 7, 8 00:00',\n                            endDate: '2019, 7, 30 00:00',\n                            percentComplete: 0\n                        },\n                        {\n                            id: 9,\n                            title: 'Read 20 books',\n                            snippit: \"Shouldn't be too hard he thought\",\n                            startDate: '2019, 1, 1 00:00',\n                            endDate: '2020, 1, 1 00:00',\n                            percentComplete: 50\n                        }\n                    ]\n                },\n                {\n                    category: 'Goal Tracker Project',\n                    id: 10,\n                    render: true,\n                    otherGoals:[\n                        {\n                            id: 11,\n                            title: 'Add Goal Adding',\n                            snippit: 'Add Form and State Addition',\n                            startDate: '2019, 7, 9 00:00',\n                            endDate: '2019, 7, 11 00:00',\n                            percentComplete: 0\n                        },\n                        {\n                            id: 12,\n                            title: 'Add Goal Deletion',\n                            snippit: 'Add Form and State Deletion',\n                            startDate: '2019, 7, 9 00:00',\n                            endDate: '2019, 7, 11 00:00',\n                            percentComplete: 0\n                        },\n                        {\n                            id: 13,\n                            title: 'Fix Small bugs',\n                            snippit: 'SideNav Stuff',\n                            startDate: '2019, 7, 9 00:00',\n                            endDate: '2019, 7, 12 00:00',\n                            percentComplete: 0\n                        },\n                        {\n                            id: 14,\n                            title: 'Add Sorting Box',\n                            snippit: 'Should be easy after I learn add and delete stuff',\n                            startDate: '2019, 7, 9 00:00',\n                            endDate: '2019, 7, 12 00:00',\n                            percentComplete: 0\n                        },\n                        {\n                            id: 15,\n                            title: 'Add Login and backend stuff',\n                            snippit: 'This might be the hard part',\n                            startDate: '2019, 7, 9 00:00',\n                            endDate: '2019, 7, 19 00:00',\n                            percentComplete: 0\n                        }\n\n                    ]\n                }\n            ],\n            completed : {\n                dailyGoals : [\n                    \n                ],\n                otherGoalsCategories : [\n                    {\n                        category: 'Programming',\n                        id: 16,\n                        otherGoals:[\n                            {\n                                id: 17,\n                                title: 'Learn React',\n                                snippit: 'Code a bunch of stuff',\n                                startDate: '2019, 7, 1 00:00',\n                                endDate: '2019, 7, 15 00:00',\n                                percentComplete: 20\n                            }\n                        ]\n                    }\n                ]\n            }\n        },\n        otherStuffs:{\n            overlayIsHidden: true,\n            renderCurrent: true,\n            renderCompleted: false,\n            renderDaily: true,\n            renderOther: true,\n        }\n    }\n    componentDidMount(){\n        let localState = this.state\n        let updatedDailyGoals= []\n        this.state.goals.dailyGoals.forEach(goal => {\n            if(Date.parse(goal.endDate) <= Date.parse(getYeseterday())){\n                localState.goals.completed.dailyGoals.push(this.changeDailyToCompleted(goal))\n            }\n            else{\n                if(Date.parse(goal.lastDayUpdated) < Date.parse(getToday())){\n                    let numDays = (((Date.parse(goal.lastDayUpdated) - Date.parse(getToday()))/ 8.64e+7) * -1)\n                    updatedDailyGoals.push(this.updateLastUpdated(goal, numDays))\n                }   \n            }\n        })\n        // loop through categories\n        let updatedOtherCategories = []\n        this.state.goals.otherGoalsCategories.forEach(category => {\n            //loop through goals\n            let updatedOtherGoals= []\n            category.otherGoals.forEach(goal => {\n                if(Date.parse(goal.endDate) <= Date.parse(getYeseterday())){\n                    //do push thingies\n                    let pushed = false\n                    this.state.goals.completed.otherGoalsCategories.forEach((completedCategory, index) => {\n                        if(completedCategory.category === category.category){\n                            localState.goals.completed.otherGoalsCategories[index].otherGoals.push(goal)\n                            pushed = true\n                        }\n                    })\n                    if(pushed === false){\n                        localState.goals.completed.otherGoalsCategories.push(\n                            {\n                                category: category.category,\n                                id: category.id,\n                                otherGoals:[\n                                    goal\n                                ]\n                            }\n                        )\n                    }\n\n                }\n                else{\n                    updatedOtherGoals.push(goal)\n                }\n            })\n\n            if(updatedOtherGoals.length !== 0){\n                let categoryRet = category\n                categoryRet.otherGoals = updatedOtherGoals\n                updatedOtherCategories.push(categoryRet)\n            }\n        })\n        localState.goals.otherGoalsCategories = updatedOtherCategories\n        localState.goals.dailyGoals = updatedDailyGoals\n        this.setState({\n            state: localState\n        })\n\n    }\n    updateCategoryRender = (key) => {\n        let localState = this.state\n        this.state.goals.otherGoalsCategories.map((category, index) => {\n            console.log(category.id, key)\n            if(category.id === key){\n                localState.goals.otherGoalsCategories[index].render = !localState.goals.otherGoalsCategories[index].render\n                console.log('found it')\n            }\n            return true;\n        })\n        \n        this.setState({\n            state: localState\n        })\n    }\n\n    updateLastUpdated = (goal, numDays) =>{\n        if(numDays > 5){\n            goal.lastDayUpdated = getToday()\n            goal.weeklyChecked = [false, false, false, false, false, false, false]\n        }\n        else{\n            goal.lastDayUpdated = getToday()\n            let weeklyChecked = [false, false, false, false, false, false, false]\n            for(let i = 0; i < (5 - numDays); i++){\n                weeklyChecked[i] = goal.weeklyChecked[i + numDays]\n            }\n            goal.weeklyChecked = weeklyChecked\n        }\n        return goal\n    }\n    changeDailyToCompleted(newGoal){\n        let endDate = new Date(newGoal.endDate);\n        let totalDays = Math.abs(new Date(newGoal.startDate) - endDate) / 8.64e+7;\n        newGoal = {\n            id: newGoal.id,\n            title: newGoal.title,\n            snippit: newGoal.snippit,\n            startDate: newGoal.startDate,\n            endDate: newGoal.endDate,\n            daysChecked: newGoal.daysChecked,\n            percentComplete: ((newGoal.daysChecked/totalDays * 100).toString().substr(0, 2))\n        }\n        return newGoal\n    }\n    deleteGoal = (key, category) => {\n        let state = this.state;\n        let toCompletedGoal;\n        if(category === 'daily'){\n            let filteredArr = this.state.goals.dailyGoals;\n            let index = this.mapFunc(this.state.goals.dailyGoals, 'id', key)\n            toCompletedGoal = this.state.goals.dailyGoals[index]\n            filteredArr.splice(index, 1);\n            state.goals.dailyGoals = filteredArr\n        }\n        else{\n            //maps and finds category\n            this.state.goals.otherGoalsCategories.forEach((catagories, index) => {\n                if(catagories.category === category){\n                    // sets filtered Arr to goal then filters out the deleted goal\n                    let filteredArr = this.state.goals.otherGoalsCategories[index].otherGoals;\n                    // Finds and removes goal\n                    this.state.goals.otherGoalsCategories[index].otherGoals.forEach((goal, index) =>{\n                        if(goal.id === key){\n                            filteredArr.splice(index, 1);\n                            toCompletedGoal = goal;\n                        }\n                        return true;\n                    })\n                    // sets local state\n                    state.goals.otherGoalsCategories[index].otherGoals = filteredArr\n                    //checks if category is empty\n                    if((state.goals.otherGoalsCategories[index].otherGoals).length === 0){\n                        state.goals.otherGoalsCategories.splice(index, 1);\n                    }\n                }\n                return true;\n            })\n        }\n        this.setState({\n            [state]: state\n        })\n        this.completed(toCompletedGoal, category)\n        return;\n    }\n    updateRenderIfs = (whichClicked) => {\n        let otherStuffs = this.state.otherStuffs\n        if(this.state.otherStuffs[whichClicked] === false){\n            otherStuffs[whichClicked] = true;\n        }\n        // switch to determine sort goals stuff can probably simplify\n        switch(whichClicked){\n            case('allTypes'):\n                otherStuffs.renderDaily = true;\n                otherStuffs.renderOther = true;\n                break;\n            case('renderCurrent'):\n                if(this.state.otherStuffs.renderCompleted === true){\n                    otherStuffs.renderCompleted = false;\n                }\n                break;\n            case('renderCompleted'):\n                if(this.state.otherStuffs.renderCurrent === true){\n                    otherStuffs.renderCurrent = false;\n                }\n                break;\n            case('renderDaily'):\n                if(this.state.otherStuffs.renderOther === true){\n                    otherStuffs.renderOther = false;\n                }\n                break;\n            case('renderOther'):\n                if(this.state.otherStuffs.renderDaily === true){\n                    otherStuffs.renderDaily = false;\n                }\n                break;\n            default:\n                break;\n        }\n        this.setState({\n            otherStuffs: otherStuffs\n        })\n    }\n    completed = (newGoal, category) => {\n        let state = this.state\n        if(category === 'daily'){\n            let endDate = new Date(newGoal.endDate);\n            let totalDays = Math.abs(new Date(newGoal.startDate) - endDate) / 8.64e+7;\n            newGoal = {\n                id: newGoal.id,\n                title: newGoal.title,\n                snippit: newGoal.snippit,\n                startDate: newGoal.startDate,\n                endDate: newGoal.endDate,\n                daysChecked: newGoal.daysChecked,\n                percentComplete: ((newGoal.daysChecked/totalDays * 100).toString().substr(0, 2))\n            }\n            state.goals.completed.dailyGoals.push(newGoal);\n        }\n        else{\n            let newCategory = true; // true of false if new category\n\n            // checks for category and pushes to category if it finds it\n            let index = this.mapFunc(this.state.goals.completed.otherGoalsCategories, 'category', category)\n            if(index !== null){\n                state.goals.completed.otherGoalsCategories[index].otherGoals.push(newGoal)\n                    newCategory = false;\n            }\n\n            //makes new category and pushes\n            if(newCategory === true){\n                newGoal = {\n                    category: category,\n                    id: uuid.v4(),\n                    otherGoals: [\n                        newGoal\n                    ]\n                }\n                // push to local state\n                state.goals.completed.otherGoalsCategories.push(newGoal);\n            }\n        }\n        //push to state and close overlay\n        state.otherStuffs.overlayIsHidden = true;\n        this.setState({\n            state: state\n            })\n        return;\n    }\n    displayGoalOverlay = () => {\n        let state = this.state.otherStuffs\n        state.overlayIsHidden = !state.overlayIsHidden;\n        this.setState({\n            [state.otherStuffs]: state\n          })\n    }\n    updateCheckMark = (key) => {\n        let state = this.state.goals;\n        //finds index of item\n        let index = this.mapFunc(state.dailyGoals, 'id', key)\n        //updates index\n        state.dailyGoals[index].weeklyChecked[4] = !state.dailyGoals[index].weeklyChecked[4]\n        state.dailyGoals[index].weeklyChecked[4] ? state.dailyGoals[index].daysChecked++ : state.dailyGoals[index].daysChecked--\n        this.setState({\n            [state.goals]: state\n        })\n    }\n    stateAdd = (newGoal) => {\n        let state = this.state\n        let startDate = getToday()\n        // check if daily\n        if(newGoal.type === 'daily'){\n            newGoal = {\n                id: uuid.v4(),\n                title: newGoal.title,\n                snippit: newGoal.snippit,\n                startDate: startDate,\n                endDate: newGoal.endDate + \" 00:00\",\n                lastDayUpdated: startDate,\n                daysChecked: 0,\n                weeklyChecked: [false, false, false, false, false, false, false]\n            }\n            // push to local state\n            state.goals.dailyGoals.push(newGoal);\n        }\n        else{\n            let category = newGoal.category; // the new category\n            let newCategory = newGoal.newCategory; // true of false if new category\n            newGoal = {\n                id: uuid.v4(),\n                title: newGoal.title,\n                snippit: newGoal.snippit,\n                startDate: startDate,\n                endDate: newGoal.endDate + \" 00:00\",\n                percentComplete: 0\n            }\n            //check if new category\n            if(newCategory === true){\n                newGoal = {\n                    category: category,\n                    id: uuid.v4(),\n                    render: true,\n                    otherGoals: [\n                        newGoal\n                    ]\n                }\n                // push to local state\n                state.goals.otherGoalsCategories.push(newGoal);\n            }\n            else{\n                //finds category to add to\n                let index = this.mapFunc(this.state.goals.otherGoalsCategories, 'category', category)\n                state.goals.otherGoalsCategories[index].otherGoals.push(newGoal)\n            }\n        }\n        //push to state and close overlay\n        state.otherStuffs.overlayIsHidden = true;\n        this.setState({\n            state: state\n        })\n        return;\n    }\n    navSlideChange = ()=>{\n        const nav = document.querySelector('.sidenav');\n        nav.classList.toggle('nav-active');\n    }\n    addPercentage = (id, category) => {\n        let state = this.state;\n\n        let categoryIndex = this.mapFunc(this.state.goals.otherGoalsCategories, 'category', category)\n        let goalIndex = this.mapFunc(this.state.goals.otherGoalsCategories[categoryIndex].otherGoals, 'id', id)\n        state.goals.otherGoalsCategories[categoryIndex].otherGoals[goalIndex].percentComplete+= 2;\n\n        if(state.goals.otherGoalsCategories[categoryIndex].otherGoals[goalIndex].percentComplete > 99){\n            this.deleteGoal(id, category);\n        }\n        else{\n            this.setState({\n                state: state\n            })\n        }\n    }\n    subtractPercentage = (id, category) => {\n        let state = this.state;\n\n        let categoryIndex = this.mapFunc(this.state.goals.otherGoalsCategories, 'category', category)\n        let goalIndex = this.mapFunc(this.state.goals.otherGoalsCategories[categoryIndex].otherGoals, 'id', id)\n\n        if(state.goals.otherGoalsCategories[categoryIndex].otherGoals[goalIndex].percentComplete <= 0){\n            return;\n        }\n        else{\n            state.goals.otherGoalsCategories[categoryIndex].otherGoals[goalIndex].percentComplete+= -2;\n            this.setState({\n                state: state\n            })\n        }\n    }\n    mapFunc = (list, category, find) =>{\n        for(let i = 0; i < list.length; i++){\n            if(list[i][category] === find){\n                return i;\n            }\n        }\n        return null;\n    }\n    render() {\n        return (\n            <div>\n            <div className=\"sidenav\">\n                <div className=\"user\">\n                    <img src=\"Images/profile.png\" alt=\"\"/>\n                    <a href=\"http://localhost:3000\">Guest</a>\n                </div>\n                <div className=\"navlinks\">\n                    <a href= \"http://localhost:3000\" >Dashboard</a>\n                    <a href= \"http://localhost:3000\" >Goals</a>\n                    <a href= \"http://localhost:3000\" >Tasks</a>\n                    <a href=\"http://localhost:3000\" >Portfolio Home</a>\n                </div>\n            </div>\n            <div className=\"topnav\">\n                <div className = \"navdropdown\" onClick={this.navSlideChange}>\n                    <div className=\"line1\"></div>\n                    <div className=\"line2\"></div>\n                    <div className=\"line3\"></div>\n                </div>\n                <h1>Current Goals</h1>\n                <div className=\"creategoalbutton\">\n                        <button id=\"button\" onClick={this.displayGoalOverlay}>Create Goal</button>\n                </div>\n            </div>\n            <div className=\"main\">\n                {/* Side selector for what to render */}\n                <TypeSelector goals={this.state.goals} updateRenderIfs={this.updateRenderIfs}  updateCategoryRender={this.updateCategoryRender}/>\n                <div className=\"goals\">\n                    {/* Daily Goals */}\n                    {this.state.otherStuffs.renderDaily && this.state.goals.dailyGoals.length !== 0 && this.state.otherStuffs.renderCurrent && \n                    <DailyGoalHeading updateCheckMark={this.updateCheckMark} dailyGoals={this.state.goals.dailyGoals} deleteGoal={this.deleteGoal}/>}\n                    {/* Completed Daily Goals */}\n                    {this.state.otherStuffs.renderDaily && this.state.goals.completed.dailyGoals.length !==  0 && this.state.otherStuffs.renderCompleted && \n                    <CompletedDailyGoals dailyGoals={this.state.goals.completed.dailyGoals} />}\n                    {/* Other Goals */}\n                    {this.state.otherStuffs.renderOther && this.state.otherStuffs.renderCurrent && this.state.goals.otherGoalsCategories.length !== 0 && \n                    <OtherGoals otherGoalCategories={this.state.goals.otherGoalsCategories} deleteGoal={this.deleteGoal}  addPercentage={this.addPercentage} subtractPercentage={this.subtractPercentage}/>}\n                    {/* Completed Other Goals */}\n                    {this.state.otherStuffs.renderOther && this.state.goals.completed.otherGoalsCategories.length !== 0 && this.state.otherStuffs.renderCompleted && \n                    <CompletedOtherGoals otherGoalCategories={this.state.goals.completed.otherGoalsCategories}/>}\n                </div>\n                {/* Overlay */}\n                {!this.state.otherStuffs.overlayIsHidden && \n                <Overlay otherGoalCategories={this.state.goals.otherGoalsCategories} closeGoalOverlay={this.displayGoalOverlay} stateAdd={this.stateAdd}/>}\n            </div>\n    </div>\n    );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}